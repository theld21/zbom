"""
Bot Controller - Qu·∫£n l√Ω logic di chuy·ªÉn c·ªßa bot
T√°ch ri√™ng ƒë·ªÉ d·ªÖ debug v√† s·ª≠a l·ªói movement
"""

import logging
import time
from typing import Optional, Dict, Any, Tuple

logger = logging.getLogger(__name__)


class BotController:
    """Controller qu·∫£n l√Ω to√†n b·ªô logic di chuy·ªÉn c·ªßa bot"""
    
    def __init__(self):
        # Movement state
        self.last_move_emit_time = 0.0
        self.arrival_block_until = 0.0
        self.last_pos = (0.0, 0.0)
        self.stuck_count = 0
        
    def reset(self):
        """Reset controller state"""
        self.last_move_emit_time = 0.0
        self.arrival_block_until = 0.0
        self.last_pos = (0.0, 0.0)
        self.stuck_count = 0
        logger.info("üîÑ BOT CONTROLLER RESET")
    
    def can_emit_move_now(self, max_cmds_per_sec: float) -> bool:
        """Ki·ªÉm tra c√≥ th·ªÉ g·ª≠i l·ªánh di chuy·ªÉn kh√¥ng"""
        min_interval = 1.0 / max(1.0, max_cmds_per_sec)
        now = time.monotonic()
        return (now - self.last_move_emit_time) >= min_interval
    
    def update_last_move_time(self):
        """C·∫≠p nh·∫≠t th·ªùi gian g·ª≠i l·ªánh cu·ªëi"""
        self.last_move_emit_time = time.monotonic()
    
    def is_in_arrival_block(self) -> bool:
        """Ki·ªÉm tra c√≥ ƒëang trong arrival block kh√¥ng"""
        return time.monotonic() < self.arrival_block_until
    
    def set_arrival_block(self, reverse_lock_seconds: float):
        """ƒê·∫∑t arrival block ƒë·ªÉ tr√°nh ƒë·∫£o chi·ªÅu"""
        self.arrival_block_until = time.monotonic() + reverse_lock_seconds
    
    async def execute_action(self, action: Dict[str, Any], send_move_func, send_bomb_func, 
                            movement_planner, survival_ai, game_state, 
                            cell_size: int, reverse_lock_seconds: float, log_map: bool) -> bool:
        """
        Th·ª±c thi action t·ª´ AI
        
        Returns:
            bool: True n·∫øu c√≥ progress, False n·∫øu kh√¥ng
        """
        if not action:
            return False
        
        action_type = action.get("type")
        
        if action_type == "move":
            goal_cell = action.get("goal_cell")
            if not goal_cell:
                return False
            
            # Log v·ªã tr√≠ bot
            from .game_state import get_my_bomber, pos_to_cell
            me = get_my_bomber()
            if me:
                current_cell = pos_to_cell(me.get("x", 0), me.get("y", 0))
                logger.info(f"ü§ñ V·ªä TR√ç: ({me.get('x', 0):.1f}, {me.get('y', 0):.1f}) ‚Üí √¥ {current_cell}")
            
            # Log map n·∫øu c·∫ßn
            if log_map:
                from .utils.loggers import log_map_state
                log_map_state(game_state, True)
            
            # Plan path
            movement_planner.plan_path(goal_cell)
            
            # QUAN TR·ªåNG: Ki·ªÉm tra xem c√≥ t√¨m ƒë∆∞·ª£c path kh√¥ng!
            if not movement_planner.plan.get("path_valid"):
                logger.warning(f"‚ùå KH√îNG T√åM ƒê∆Ø·ª¢C PATH ƒê·∫æN {goal_cell} - X√ìA PLAN TH·∫§T B·∫†I!")
                # Clear plan trong survival AI ƒë·ªÉ t·∫°o plan m·ªõi
                survival_ai.current_plan = None
                logger.info(f"üóëÔ∏è ƒê√É X√ìA current_plan trong survival AI")
                return False
            
            # L∆∞u plan_type v√† escape_path t·ª´ action
            if action.get("plan_type"):
                movement_planner.plan["plan_type"] = action["plan_type"]
                logger.info(f"üìã ƒê√É SET PLAN_TYPE = {action['plan_type']}")
            else:
                logger.info(f"‚ö†Ô∏è ACTION KH√îNG C√ì PLAN_TYPE! action={action}")
            
            # L∆∞u escape_path n·∫øu c√≥
            if action.get("escape_path"):
                movement_planner.plan["escape_path"] = action["escape_path"]
                logger.info(f"üíæ ƒê√É L∆ØU ESCAPE_PATH v√†o plan: {action['escape_path']}")
            
            # L·∫•y direction ti·∫øp theo
            direction = movement_planner.get_next_direction()
            if direction:
                await send_move_func(direction)
                movement_planner.plan["skip_once"] = True
                self.stuck_count = 0
                return True
        
        elif action_type == "bomb":
            await send_bomb_func()
            
            # Set flag escape
            survival_ai.must_escape_bomb = True
            logger.warning(f"‚ö° SET FLAG: must_escape_bomb = True")
            
            # QUAN TR·ªåNG: L·∫¨P ESCAPE PLAN NGAY SAU KHI ƒê·∫∂T BOM!
            escape_path = action.get("escape_path")
            if escape_path and len(escape_path) >= 2:
                logger.info(f"üèÉ L·∫¨P ESCAPE PLAN NGAY SAU KHI ƒê·∫∂T BOM: {escape_path}")
                movement_planner.plan_escape_path(escape_path)
                logger.info(f"‚úÖ ƒê√É L·∫¨P ESCAPE PLAN: bot s·∫Ω ch·∫°y tho√°t ngay!")
            else:
                logger.warning(f"‚ö†Ô∏è KH√îNG C√ì ESCAPE PATH! Bot s·∫Ω t·ª± t√¨m ƒë∆∞·ªùng tho√°t")
            
            self.stuck_count = 0
            return True
        
        else:
            # Fallback: di chuy·ªÉn theo orient
            direction = action.get("orient")
            if direction:
                # Check reverse lock
                if movement_planner.recent_orient and time.monotonic() < movement_planner.reverse_block_until:
                    reverse = {"UP":"DOWN","DOWN":"UP","LEFT":"RIGHT","RIGHT":"LEFT"}
                    if direction == reverse.get(movement_planner.recent_orient):
                        return False
                
                await send_move_func(direction)
                self.stuck_count = 0
                return True
        
        return False
    
    async def execute_plan_continuation(self, movement_planner, send_move_func, 
                                       cell_size: int, reverse_lock_seconds: float) -> bool:
        """
        Ti·∫øp t·ª•c th·ª±c hi·ªán plan d√†i h·∫°n
        
        Returns:
            bool: True n·∫øu c√≥ progress
        """
        plan = movement_planner.plan
        
        if not plan["path_valid"] or not plan["path"]:
            return False
        
        if plan.get("skip_once"):
            plan["skip_once"] = False
            return False
        
        # Advance plan
        movement_planner.advance(cell_size, reverse_lock_seconds)
        current_orient = plan["orient"]
        
        if current_orient and current_orient in ["UP", "DOWN", "LEFT", "RIGHT"]:
            await send_move_func(current_orient)
            self.stuck_count = 0
            return True
        
        return False
    
    async def handle_plan_completion(self, movement_planner, survival_ai, send_bomb_func) -> bool:
        """
        X·ª≠ l√Ω khi plan ho√†n th√†nh
        
        Returns:
            bool: True n·∫øu c√≥ action (ƒë·∫∑t bom)
        """
        plan = movement_planner.plan
        
        # Ki·ªÉm tra just_completed
        if plan.get("just_completed"):
            completed_time = plan["just_completed"]
            if time.time() - completed_time < 1.0:
                # ƒê·∫∑t bom n·∫øu l√† bomb_chest plan
                if not plan.get("bomb_placed"):
                    plan_type = plan.get("plan_type")
                    
                    if plan_type == "bomb_chest":
                        from .game_state import get_my_bomber, pos_to_cell
                        me = get_my_bomber()
                        if me:
                            current_cell = pos_to_cell(me.get("x", 0), me.get("y", 0))
                            # Convert to int for comparison
                            current_cell_int = (int(current_cell[0]), int(current_cell[1]))
                            goal_cell = plan.get("long_term_goal")
                            
                            # QUAN TR·ªåNG: CH·ªà ƒë·∫∑t bom khi bot TH·ª∞C S·ª∞ ·ªû goal_cell!
                            if goal_cell and current_cell_int != goal_cell:
                                # logger.warning(f"‚ö†Ô∏è Bot ch∆∞a ƒë·∫øn goal_cell! Hi·ªán t·∫°i: {current_cell_int}, Goal: {goal_cell}")
                                return False
                            
                            if not plan.get("logged_bomb_action"):
                                logger.info(f"üí£ PATH HO√ÄN TH√ÄNH - ƒê·∫∂T BOM T·∫†I: {current_cell_int}")
                                plan["logged_bomb_action"] = True
                            
                            # ƒê·∫∑t bom
                            await send_bomb_func()
                            plan["bomb_placed"] = True
                            
                            # Set escape flag
                            survival_ai.must_escape_bomb = True
                            logger.warning(f"‚ö° SET FLAG: must_escape_bomb = True")
                            
                            # QUAN TR·ªåNG: L·∫•y escape_path t·ª´ movement plan (ƒë√£ l∆∞u tr∆∞·ªõc ƒë√≥) v√† l·∫≠p ESCAPE PLAN!
                            escape_path = plan.get("escape_path", [])
                            if escape_path and len(escape_path) >= 2:
                                logger.info(f"üèÉ L·∫¨P ESCAPE PLAN SAU KHI ƒê·∫∂T BOM: {escape_path}")
                                movement_planner.plan_escape_path(escape_path)
                                logger.info(f"‚úÖ ƒê√É L·∫¨P ESCAPE PLAN: bot s·∫Ω ch·∫°y tho√°t!")
                            else:
                                logger.warning(f"‚ö†Ô∏è KH√îNG C√ì ESCAPE PATH trong movement plan!")
                            
                            # X√ìA c√°c field ƒë√£ d√πng ƒë·ªÉ tr√°nh ƒë·∫∑t bom l·∫°i l·∫ßn n·ªØa
                            plan.pop("escape_path", None)
                            plan.pop("just_completed", None)
                            plan.pop("plan_type", None)
                            plan.pop("logged_bomb_action", None)
                            logger.info(f"üóëÔ∏è ƒê√É X√ìA just_completed v√† plan_type sau khi ƒë·∫∑t bom")
                            
                            return True
                    else:
                        if not plan.get("logged_bomb_action"):
                            logger.info(f"‚úÖ PATH HO√ÄN TH√ÄNH - KH√îNG ƒê·∫∂T BOM: Plan type = {plan_type}")
                            plan["logged_bomb_action"] = True
                return False
            else:
                # H·∫øt delay
                plan.pop("just_completed", None)
                plan.pop("bomb_placed", None)
                plan.pop("logged_bomb_action", None)
                plan.pop("plan_type", None)
        
        # ƒê·∫∑t bom t·∫°i target n·∫øu c·∫ßn
        if plan.get("need_bomb_at_target"):
            target_cell = plan["need_bomb_at_target"]
            logger.info(f"üí£ ƒê·∫∂T BOM NGAY T·∫†I: {target_cell}")
            await send_bomb_func()
            
            # Set escape flag
            survival_ai.must_escape_bomb = True
            logger.warning(f"‚ö° SET FLAG: must_escape_bomb = True")
            
            plan.pop("need_bomb_at_target", None)
            plan["bomb_placed"] = True
            return True
        
        return False


# Global controller instance
bot_controller = BotController()

def get_bot_controller() -> BotController:
    """L·∫•y bot controller instance"""
    return bot_controller

