#!/usr/bin/env python3
"""
Bot Bomberman - Zinza Hackathon 2025
Bot AI ƒë∆°n gi·∫£n v·ªõi chi·∫øn l∆∞·ª£c sinh t·ªìn
"""

import asyncio
import logging
import os
import time
from contextlib import asynccontextmanager

# H·ªá th·ªëng log di chuy·ªÉn ƒë∆°n gi·∫£n
class MovementLogger:
    def __init__(self):
        self.current_direction = None
        self.last_logged_cell = None  # Track √¥ ƒë√£ log
        
    def log_movement(self, direction: str):
        """Log di chuy·ªÉn - ch·ªâ log khi thay ƒë·ªïi h∆∞·ªõng"""
        if not LOG_MOVEMENT:
            return
        if self.current_direction != direction:
            self.current_direction = direction
            me = get_my_bomber()
            if me:
                px, py = me.get("x", 0), me.get("y", 0)
                current_cell = pos_to_cell(px, py)
                logger.info(f"üö∂ DI CHUY·ªÇN: pixel({px:.1f},{py:.1f}) tile{current_cell} ‚Üí {direction}")
            else:
                logger.info(f"üö∂ DI CHUY·ªÇN: {direction}")
    
    def check_and_log_cell_arrival(self):
        """Ki·ªÉm tra v√† log khi bot v√†o √¥ m·ªõi"""
        if not LOG_MOVEMENT:
            return
        me = get_my_bomber()
        if not me:
            return
        
        px, py = me.get("x", 0), me.get("y", 0)
        current_cell = pos_to_cell(px, py)
        
        # Ch·ªâ log khi v√†o √¥ M·ªöI
        if current_cell != self.last_logged_cell:
            logger.info(f"üìç V√ÄO √î: pixel({px:.1f},{py:.1f}) ‚Üí tile{current_cell}")
            self.last_logged_cell = current_cell
    
    def flush(self):
        pass

movement_logger = MovementLogger()

def log_map_state(force: bool = False):
    """Log tr·∫°ng th√°i b·∫£n ƒë·ªì tr∆∞·ªõc khi ph√¢n t√≠ch plan"""
    if not LOG_MAP and not force:
        return
        
    try:
        # L·∫•y th√¥ng tin map
        map_data = game_state.get("map", [])
        if isinstance(map_data, dict):
            tiles = map_data.get("tiles", [])
        else:
            tiles = map_data if isinstance(map_data, list) else []
        
        # DEBUG: Log c·∫•u tr√∫c d·ªØ li·ªáu map (ch·ªâ khi c·∫ßn debug)
        if LOG_GAME_EVENTS:  # T·∫Øt debug log
            logger.info(f"üó∫Ô∏è DEBUG MAP: type={type(map_data)}, tiles_type={type(tiles)}")
            if tiles and len(tiles) > 0:
                logger.info(f"üó∫Ô∏è DEBUG TILES: len={len(tiles)}")
        
        bombs = game_state.get("bombs", [])
        items = game_state.get("items", [])
        chests = game_state.get("chests", [])
        
        # L·∫•y v·ªã tr√≠ bot
        me = get_my_bomber()
        bot_cell = None
        if me:
            bot_cell = pos_to_cell(me.get("x", 0), me.get("y", 0))
        
        # T·∫°o map 14x14 (b·ªè h√†ng/c·ªôt bi√™n - ch·ªâ hi·ªÉn th·ªã khu v·ª±c b√™n trong)
        map_lines = []
        
        for y in range(1, 15):  # H√†ng 1-14 (b·ªè h√†ng 0 v√† 15)
            line = ""
            for x in range(1, 15):  # C·ªôt 1-14 (b·ªè c·ªôt 0 v√† 15)
                # Ki·ªÉm tra bot
                if bot_cell and bot_cell == (x, y):
                    line += "X"  # Bot
                    continue
                
                # Ki·ªÉm tra bomb
                has_bomb = False
                for bomb in bombs:
                    bomb_cell = pos_to_cell(bomb.get("x", 0), bomb.get("y", 0))
                    if bomb_cell == (x, y):
                        line += "b"  # Bomb
                        has_bomb = True
                        break
                
                if has_bomb:
                    continue
                
                # Ki·ªÉm tra r∆∞∆°ng
                has_chest = False
                for chest in chests:
                    chest_cell = pos_to_cell(chest.get("x", 0), chest.get("y", 0))
                    if chest_cell == (x, y):
                        line += "r"  # R∆∞∆°ng
                        has_chest = True
                        break
                
                if has_chest:
                    continue
                
                # Ki·ªÉm tra item
                has_item = False
                for item in items:
                    item_cell = pos_to_cell(item.get("x", 0), item.get("y", 0))
                    if item_cell == (x, y):
                        item_type = item.get("type", "")
                        if item_type == "SPEED":
                            line += "g"  # Gi√†y
                        elif item_type == "BOMB_COUNT":
                            line += "c"  # Item bom
                        elif item_type == "EXPLOSION_RANGE":
                            line += "l"  # L·ª≠a
                        else:
                            line += "i"  # Item kh√°c
                        has_item = True
                        break
                
                if has_item:
                    continue
                
                # Ki·ªÉm tra t∆∞·ªùng - LOGIC S·ª¨A L·∫†I
                try:
                    # Ki·ªÉm tra bounds tr∆∞·ªõc
                    if y < len(tiles) and x < len(tiles[y]):
                        # Ki·ªÉm tra tile c√≥ ph·∫£i t∆∞·ªùng kh√¥ng - S·ª¨A: tiles[y][x]
                        tile_value = tiles[y][x]
                        if tile_value == 'W' or tile_value == 1:  # H·ªó tr·ª£ c·∫£ string 'W' v√† s·ªë 1
                            line += "x"  # T∆∞·ªùng
                        else:
                            line += "-"  # Tr·ªëng
                    else:
                        # Ngo√†i bounds = t∆∞·ªùng
                        line += "x"  # T∆∞·ªùng
                except Exception as e:
                    # L·ªói = coi nh∆∞ t∆∞·ªùng
                    line += "x"  # T∆∞·ªùng
            
            map_lines.append(line)
        
        # Log map
        logger.info("üó∫Ô∏è B·∫¢N ƒê·ªí HI·ªÜN T·∫†I (khu v·ª±c b√™n trong):")
        for i, line in enumerate(map_lines):
            logger.info(f"üó∫Ô∏è {i+1:2d}|{line}")
        
        # Log ch√∫ th√≠ch
        logger.info("üó∫Ô∏è CH√ö TH√çCH: x=t∆∞·ªùng, r=r∆∞∆°ng, X=bot, b=bomb, g=gi√†y, c=item bom, l=l·ª≠a, -=tr·ªëng")
        
    except Exception as e:
        logger.error(f"üó∫Ô∏è L·ªói log map: {e}")

# Import c√°c module c·∫ßn thi·∫øt
from aiolimiter import AsyncLimiter
from fastapi import FastAPI
import socketio

# Import config v√† modules
from .config import (
    SOCKET_SERVER, TOKEN, TICK_HZ, MAX_CMDS_PER_SEC, CELL_SIZE, LOG_LEVEL, BOT_NAME,
    ARRIVAL_TOLERANCE_PX, REVERSE_LOCK_SECONDS, PREALIGN_MARGIN_PX, BOT_SIZE,
    LOG_MOVEMENT, LOG_ITEMS, LOG_BOMBS, LOG_CHESTS, LOG_MAP, LOG_AI,
    LOG_SOCKET, LOG_GAME_EVENTS, LOG_ITEM_COLLECTION, LOG_BOMB_EVENTS,
    DIRECTIONS
)
from .game_state import (
    game_state, can_send_command, get_my_bomber, pos_to_cell, cell_to_pos, 
    cell_top_left_pos, pos_to_cell_bot, is_passable
)
from .survival_ai import choose_next_action
from .socket_handlers import (
    handle_connect, handle_disconnect, handle_user, handle_start, 
    handle_finish, handle_player_move, handle_new_bomb, 
    handle_bomb_explode, handle_map_update, handle_item_collected,
    handle_chest_destroyed, handle_new_enemy, handle_user_die_update,
    handle_user_disconnect, handle_new_life
)

# Gi·ªõi h·∫°n t·ªëc ƒë·ªô g·ª≠i l·ªánh
cmd_limiter = AsyncLimiter(max_rate=MAX_CMDS_PER_SEC, time_period=1)
logger = logging.getLogger("bot")

# Kh·ªüi t·∫°o Socket.IO client
sio = socketio.AsyncClient(
    reconnection=True, 
    reconnection_attempts=0, 
    logger=False, 
    engineio_logger=False
)

# ---------- Ack logging helpers ----------
def _ack_logger(event_name: str):
    def _cb(res=None):
        try:
            logger.info(f"ACK {event_name}: {res}")
        except Exception:
            pass
    return _cb

# ---------- Move pacing (evenly spread per second) ----------
_last_move_emit_time: float = 0.0
_recent_orient: str | None = None
_reverse_block_until: float = 0.0
_arrival_block_until: float = 0.0
_last_pos: tuple = (0.0, 0.0)
_stuck_count: int = 0
_oscillation_detector: list = []  # L∆∞u l·ªãch s·ª≠ h∆∞·ªõng di chuy·ªÉn ƒë·ªÉ ph√°t hi·ªán oscillation

def _detect_oscillation(direction: str) -> bool:
    """Ph√°t hi·ªán oscillation"""
    global _oscillation_detector
    _oscillation_detector.append(direction)
    
    if len(_oscillation_detector) > 10:
        _oscillation_detector = _oscillation_detector[-10:]
    
    if len(_oscillation_detector) < 4:
        return False
    
    # Ki·ªÉm tra pattern A-B-A-B
    if len(_oscillation_detector) >= 4:
        last_4 = _oscillation_detector[-4:]
        if (last_4[0] == last_4[2] and last_4[1] == last_4[3] and 
            last_4[0] != last_4[1]):
            return True
    
    return False

def _can_emit_move_now() -> bool:
    global _last_move_emit_time
    min_interval = 1.0 / max(1.0, MAX_CMDS_PER_SEC)
    now = time.monotonic()
    return (now - _last_move_emit_time) >= min_interval


async def _maybe_emit_move(orient: str):
    global _last_move_emit_time
    if not _can_emit_move_now():
        return
    await send_move(orient)
    _last_move_emit_time = time.monotonic()
    # Ghi nh·∫≠n h∆∞·ªõng v·ª´a g·ª≠i ƒë·ªÉ ch·ªëng ƒë·∫£o chi·ªÅu ngay l·∫≠p t·ª©c
    global _recent_orient
    _recent_orient = orient

@asynccontextmanager
async def lifespan(app: FastAPI):
    """Qu·∫£n l√Ω v√≤ng ƒë·ªùi FastAPI"""
    # C·∫•u h√¨nh m·ª©c log theo LOG_LEVEL
    try:
        level = getattr(logging, LOG_LEVEL, logging.INFO)
        logging.basicConfig(level=level)
        logger.setLevel(level)
    except Exception:
        pass
    logger.info("üöÄ Kh·ªüi ƒë·ªông bot...")
    try:
        # T·∫°m th·ªùi t·∫Øt AI ƒëa lu·ªìng
        # multithread_ai.start()
        await startup()
        logger.info("üöÄ Bot ƒë√£ s·∫µn s√†ng")
    except Exception as e:
        logger.error(f"üöÄ L·ªói kh·ªüi ƒë·ªông: {e}")
    yield
    # D·ª´ng AI ƒëa lu·ªìng
    # multithread_ai.stop()
    logger.info("üöÄ Bot ƒë√£ d·ª´ng")

app = FastAPI(lifespan=lifespan)

# ---------- API Endpoints ----------
@app.get("/healthz")
async def health_check():
    """Ki·ªÉm tra tr·∫°ng th√°i bot"""
    return {
        "status": "ok", 
        "connected": game_state["connected"], 
        "started": game_state["game_started"]
    }

@app.get("/state")
async def get_state():
    """L·∫•y tr·∫°ng th√°i game hi·ªán t·∫°i"""
    me = get_my_bomber()
    return {
        "connected": game_state["connected"],
        "started": game_state["game_started"],
        "my_uid": game_state["my_uid"],
        "me": me,
        "bombs": len(game_state.get("bombs", [])),
        "items": len(game_state.get("items", [])),
        "chests": len(game_state.get("chests", [])),
    }


# ---------- Socket Event Handlers ----------
@sio.event
async def connect():
    """X·ª≠ l√Ω k·∫øt n·ªëi socket"""
    handle_connect()
    
    # G·ª≠i y√™u c·∫ßu tham gia ngay sau khi k·∫øt n·ªëi
    try:
        await sio.emit("join", {})
    except Exception as e:
        logger.error(f"L·ªói g·ª≠i join: {e}")

@sio.event
async def connect_error(data):
    """X·ª≠ l√Ω l·ªói k·∫øt n·ªëi"""
    logger.error(f"L·ªói k·∫øt n·ªëi: {data}")

@sio.event
async def disconnect():
    """X·ª≠ l√Ω ng·∫Øt k·∫øt n·ªëi"""
    handle_disconnect()

@sio.on("user")
async def on_user(data=None):
    """X·ª≠ l√Ω s·ª± ki·ªán user"""
    handle_user(data or {})

@sio.on("start")
async def on_start(data=None):
    """X·ª≠ l√Ω s·ª± ki·ªán b·∫Øt ƒë·∫ßu game"""
    logger.info(f"üéÆ GAME B·∫ÆT ƒê·∫¶U")
    handle_start(data or {})

@sio.on("finish")
async def on_finish(data=None):
    """X·ª≠ l√Ω s·ª± ki·ªán k·∫øt th√∫c game"""
    logger.info(f"üèÅ GAME K·∫æT TH√öC")
    handle_finish(data or {})

@sio.on("player_move")
async def on_player_move(data=None):
    """X·ª≠ l√Ω s·ª± ki·ªán di chuy·ªÉn player"""
    handle_player_move(data or {})

@sio.on("new_bomb")
async def on_new_bomb(data=None):
    """X·ª≠ l√Ω s·ª± ki·ªán bom m·ªõi"""
    handle_new_bomb(data or {})

@sio.on("bomb_explode")
async def on_bomb_explode(data=None):
    """X·ª≠ l√Ω s·ª± ki·ªán bom n·ªï"""
    handle_bomb_explode(data or {})

@sio.on("map_update")
async def on_map_update(data=None):
    """X·ª≠ l√Ω s·ª± ki·ªán c·∫≠p nh·∫≠t map"""
    handle_map_update(data or {})

@sio.on("item_collected")
async def on_item_collected(data=None):
    """X·ª≠ l√Ω s·ª± ki·ªán nh·∫∑t item"""
    handle_item_collected(data or {})

@sio.on("chest_destroyed")
async def on_chest_destroyed(data=None):
    """X·ª≠ l√Ω s·ª± ki·ªán r∆∞∆°ng b·ªã ph√°"""
    handle_chest_destroyed(data or {})

@sio.on("new_enemy")
async def on_new_enemy(data=None):
    """X·ª≠ l√Ω s·ª± ki·ªán bot m·ªõi tham gia"""
    handle_new_enemy(data or {})

@sio.on("user_die_update")
async def on_user_die_update(data=None):
    """X·ª≠ l√Ω s·ª± ki·ªán bot b·ªã h·∫° g·ª•c"""
    handle_user_die_update(data or {})

@sio.on("user_disconnect")
async def on_user_disconnect(data=None):
    """X·ª≠ l√Ω s·ª± ki·ªán bot tho√°t kh·ªèi ph√≤ng"""
    handle_user_disconnect(data or {})

@sio.on("new_life")
async def on_new_life(data=None):
    """X·ª≠ l√Ω s·ª± ki·ªán bot h·ªìi sinh"""
    handle_new_life(data or {})

# ---------- Bot Actions ----------
async def send_move(orient: str):
    """G·ª≠i l·ªánh di chuy·ªÉn v·ªõi gi·ªõi h·∫°n t·ªëc ƒë·ªô"""
    if orient not in DIRECTIONS:
        return
    if not can_send_command():
        logger.warning(f"üö´ KH√îNG TH·ªÇ DI CHUY·ªÇN: Qu√° gi·ªõi h·∫°n t·ªëc ƒë·ªô")
        return

    # Kh√¥ng ch·∫∑n theo movable ƒë·ªÉ tr√°nh t·ª± kh√≥a khi server t·∫°m th·ªùi set movable=False
    # Server s·∫Ω quy·∫øt ƒë·ªãnh h·ª£p l·ªá v√† ph·∫£n h·ªìi qua player_move
    
    # Ki·ªÉm tra game ƒë√£ b·∫Øt ƒë·∫ßu ch∆∞a
    if not game_state.get("game_started", False):
        # Trong m√¥i tr∆∞·ªùng dev, cho ph√©p di chuy·ªÉn m√† kh√¥ng c·∫ßn start event
        if os.getenv("ENVIRONMENT", "prod") == "dev":
            pass  # B·ªè log - kh√¥ng c·∫ßn log di chuy·ªÉn
        else:
            logger.warning(f"üö´ KH√îNG TH·ªÇ DI CHUY·ªÇN: Game ch∆∞a b·∫Øt ƒë·∫ßu - ch·ªù start event - {orient}")
            return
    
    try:
        async with cmd_limiter:
            await sio.emit("move", {"orient": orient}, callback=_ack_logger("move"))
        movement_logger.log_movement(orient)
    except Exception as e:
        logger.error(f"‚ùå L·ªói di chuy·ªÉn: {e}")

async def send_bomb():
    """G·ª≠i l·ªánh ƒë·∫∑t bom"""
    if not can_send_command():
        logger.warning(f"üö´ KH√îNG TH·ªÇ ƒê·∫∂T BOM: Qu√° gi·ªõi h·∫°n t·ªëc ƒë·ªô")
        return
    
    # Ki·ªÉm tra bot c√≥ th·ªÉ di chuy·ªÉn kh√¥ng
    me = get_my_bomber()
    if me and not me.get("movable", True):
        logger.warning(f"üö´ KH√îNG TH·ªÇ ƒê·∫∂T BOM: Bot kh√¥ng th·ªÉ di chuy·ªÉn")
        return
    
    # Ki·ªÉm tra game ƒë√£ b·∫Øt ƒë·∫ßu ch∆∞a
    if not game_state.get("game_started", False):
        # Trong m√¥i tr∆∞·ªùng dev, cho ph√©p ƒë·∫∑t bom m√† kh√¥ng c·∫ßn start event
        if os.getenv("ENVIRONMENT", "prod") == "dev":
            logger.info(f"üí£ CH·∫æ ƒê·ªò DEV: Cho ph√©p ƒë·∫∑t bom m√† kh√¥ng c·∫ßn start event")
        else:
            logger.warning(f"üö´ KH√îNG TH·ªÇ ƒê·∫∂T BOM: Game ch∆∞a b·∫Øt ƒë·∫ßu - ch·ªù start event")
            return
    
    try:
        async with cmd_limiter:
            await sio.emit("place_bomb", {}, callback=_ack_logger("place_bomb"))
        logger.info(f"üí£ ƒê·∫∂T BOM")
        
        # C·∫≠p nh·∫≠t s·ªë bom local
        my_uid = game_state.get("my_uid")
        if my_uid:
            for bomber in game_state["bombers"]:
                if bomber.get("uid") == my_uid:
                    bomber["bombCount"] = max(0, bomber.get("bombCount", 1) - 1)
                    break
    except Exception as e:
        logger.error(f"L·ªói ƒë·∫∑t bom: {e}")

# ---------- Bot Logic ----------
# K·∫ø ho·∫°ch di chuy·ªÉn d√†i h·∫°n v·ªõi ƒë∆∞·ªùng ƒëi th·∫≥ng
movement_plan = {
    "path": [],                # Danh s√°ch c√°c √¥ c·∫ßn ƒëi qua [(x1,y1), (x2,y2), ...]
    "current_target_index": 0, # Ch·ªâ s·ªë √¥ hi·ªán t·∫°i ƒëang nh·∫Øm t·ªõi
    "orient": None,            # "UP"|"DOWN"|"LEFT"|"RIGHT" hi·ªán t·∫°i
    "target_cell": None,       # (cx, cy) √¥ hi·ªán t·∫°i ƒëang nh·∫Øm t·ªõi
    "remaining_px": 0.0,       # s·ªë pixel c√≤n l·∫°i ƒë·ªÉ t·ªõi √¥ m·ª•c ti√™u
    "skip_once": False,        # b·ªè qua m·ªôt l·∫ßn g·ª≠i sau khi action ƒë·ªÉ tr√°nh double-send
    "long_term_goal": None,    # M·ª•c ti√™u d√†i h·∫°n (x, y)
    "path_valid": False,       # ƒê∆∞·ªùng ƒëi c√≥ c√≤n h·ª£p l·ªá kh√¥ng
}

def _reset_movement_plan() -> None:
    """Reset movement plan to initial state."""
    global movement_plan, _oscillation_detector
    movement_plan["path"] = []
    movement_plan["current_target_index"] = 0
    movement_plan["orient"] = None
    movement_plan["target_cell"] = None
    movement_plan["remaining_px"] = 0.0
    movement_plan["skip_once"] = False
    movement_plan["long_term_goal"] = None
    movement_plan["path_valid"] = False
    # Reset oscillation detector
    _oscillation_detector = []

def reset_global_state() -> None:
    """Reset to√†n b·ªô global state khi game k·∫øt th√∫c"""
    global _last_move_emit_time, _recent_orient, _reverse_block_until, _arrival_block_until, _last_pos, _stuck_count, _oscillation_detector
    
    # Reset movement variables
    _last_move_emit_time = 0.0
    _recent_orient = None
    _reverse_block_until = 0.0
    _arrival_block_until = 0.0
    _last_pos = (0.0, 0.0)
    _stuck_count = 0
    _oscillation_detector = []
    
    # Reset movement plan
    _reset_movement_plan()
    
    # Reset movement logger
    global movement_logger
    movement_logger.current_direction = None
    
    logger.info("üîÑ GLOBAL RESET: ƒê√£ reset to√†n b·ªô global state")

def _plan_long_term_path(goal_cell: tuple) -> None:
    """L·∫≠p k·∫ø ho·∫°ch ƒë∆∞·ªùng ƒëi d√†i h·∫°n t·ª´ v·ªã tr√≠ hi·ªán t·∫°i ƒë·∫øn m·ª•c ti√™u"""
    me = get_my_bomber()
    if not me:
        logger.warning(f"üö´ PLAN FAILED: Kh√¥ng t√¨m th·∫•y bot")
        return
        
    current_cell = pos_to_cell(me.get("x", 0), me.get("y", 0))
    logger.info(f"üó∫Ô∏è L·∫¨P PLAN: t·ª´ {current_cell} ƒë·∫øn {goal_cell}")
    
    # S·ª≠ d·ª•ng A* ƒë·ªÉ t√¨m ƒë∆∞·ªùng ƒëi t·ªëi ∆∞u
    from .game_state import astar_shortest_path
    path = astar_shortest_path(current_cell, goal_cell, avoid_hazard=True, avoid_bots=False)
    
    if path and len(path) > 1:
        movement_plan["path"] = path
        movement_plan["current_target_index"] = 1  # B·∫Øt ƒë·∫ßu t·ª´ √¥ th·ª© 2 (√¥ ƒë·∫ßu l√† v·ªã tr√≠ hi·ªán t·∫°i)
        movement_plan["long_term_goal"] = goal_cell
        movement_plan["path_valid"] = True
        logger.info(f"üó∫Ô∏è PLAN D√ÄI H·∫†N: {len(path)} √¥ t·ª´ {current_cell} ƒë·∫øn {goal_cell}")
        logger.info(f"üó∫Ô∏è PATH CHI TI·∫æT: {path}")
    else:
        # KH√îNG C√ì ƒê∆Ø·ªúNG ƒêI - A* ƒë√£ fail
        # Th·ª≠ BFS m·ªôt l·∫ßn n·ªØa tr∆∞·ªõc khi b·ªè cu·ªôc
        from .game_state import bfs_shortest_path
        path_bfs = bfs_shortest_path(current_cell, goal_cell, avoid_hazard=True, avoid_bots=False)
        
        if path_bfs and len(path_bfs) > 1:
            movement_plan["path"] = path_bfs
            movement_plan["current_target_index"] = 1
            movement_plan["long_term_goal"] = goal_cell
            movement_plan["path_valid"] = True
            logger.info(f"üó∫Ô∏è PLAN BFS: {len(path_bfs)} √¥ t·ª´ {current_cell} ƒë·∫øn {goal_cell}")
            logger.info(f"üó∫Ô∏è PATH CHI TI·∫æT: {path_bfs}")
        else:
            # TH·ª∞C S·ª∞ KH√îNG C√ì ƒê∆Ø·ªúNG - target kh√¥ng th·ªÉ ƒë·∫øn ƒë∆∞·ª£c
            logger.warning(f"‚ùå KH√îNG C√ì ƒê∆Ø·ªúNG ƒê·∫æN: {goal_cell} t·ª´ {current_cell}")
            movement_plan["path_valid"] = False
            # Kh√¥ng set path - ƒë·ªÉ AI ch·ªçn target kh√°c
            best_cell = None
            min_distance = float('inf')
            for dx in range(-3, 4):
                for dy in range(-3, 4):
                    if dx == 0 and dy == 0:
                        continue
                    test_cell = (goal_cell[0] + dx, goal_cell[1] + dy)
                    # Tr√°nh v·ªã tr√≠ hi·ªán t·∫°i v√† ki·ªÉm tra passable
                    if test_cell != current_cell and is_passable(test_cell[0], test_cell[1]):
                        distance = abs(dx) + abs(dy)
                        if distance < min_distance:
                            min_distance = distance
                            best_cell = test_cell
            
            if best_cell and best_cell != current_cell:
                movement_plan["path"] = [current_cell, best_cell]
                movement_plan["current_target_index"] = 1
                movement_plan["long_term_goal"] = best_cell
                movement_plan["path_valid"] = True
                logger.info(f"üó∫Ô∏è PLAN THAY TH·∫æ: t·ª´ {current_cell} ƒë·∫øn {best_cell}")
                logger.info(f"üó∫Ô∏è PATH THAY TH·∫æ: {movement_plan['path']}")
            else:
                logger.warning(f"üö´ KH√îNG T√åM TH·∫§Y √î THAY TH·∫æ cho {goal_cell}")
                # Reset plan ƒë·ªÉ AI t√¨m m·ª•c ti√™u m·ªõi
                movement_plan["path"] = []
                movement_plan["current_target_index"] = 0
                movement_plan["path_valid"] = False

def _get_next_direction_from_path() -> str:
    """L·∫•y h∆∞·ªõng di chuy·ªÉn ti·∫øp theo t·ª´ path hi·ªán t·∫°i"""
    if not movement_plan["path"] or movement_plan["current_target_index"] >= len(movement_plan["path"]):
        return None
        
    me = get_my_bomber()
    if not me:
        return None
        
    current_cell = pos_to_cell(me.get("x", 0), me.get("y", 0))
    target_cell = movement_plan["path"][movement_plan["current_target_index"]]
    
    # T√≠nh h∆∞·ªõng di chuy·ªÉn
    dx = target_cell[0] - current_cell[0]
    dy = target_cell[1] - current_cell[1]
    
    if dx > 0:
        direction = "RIGHT"
    elif dx < 0:
        direction = "LEFT"
    elif dy > 0:
        direction = "DOWN"
    elif dy < 0:
        direction = "UP"
    else:
        # ƒê√£ ƒë·∫øn √¥ m·ª•c ti√™u, chuy·ªÉn sang √¥ ti·∫øp theo
        movement_plan["current_target_index"] += 1
        if movement_plan["current_target_index"] < len(movement_plan["path"]):
            return _get_next_direction_from_path()
        return None
    
    return direction

def _advance_move_plan() -> None:
    """Th·ª±c hi·ªán di chuy·ªÉn theo plan d√†i h·∫°n"""
    me = get_my_bomber()
    if not me:
        _reset_movement_plan()
        return
        
    if not movement_plan["path_valid"] or not movement_plan["path"]:
        return
        
    current_cell = pos_to_cell(me.get("x", 0), me.get("y", 0))
    direction = _get_next_direction_from_path()
    if not direction:
        logger.info(f"‚úÖ HO√ÄN TH√ÄNH: ƒë√£ ƒë·∫øn {movement_plan['long_term_goal']}")
        _reset_movement_plan()
        # Set flag ƒë·ªÉ skip 1 gi√¢y, cho bot c∆° h·ªôi ƒë·∫∑t bom ho·∫∑c AI t√≠nh to√°n
        movement_plan["just_completed"] = time.time()
        return
        
    if _detect_oscillation(direction):
        logger.warning(f"üö´ PH√ÅT HI·ªÜN OSCILLATION: {_oscillation_detector[-4:]} - Reset plan!")
        _reset_movement_plan()
        _oscillation_detector = []
        return
    
    # Ki·ªÉm tra ƒë·∫£o chi·ªÅu
    global _recent_orient, _reverse_block_until
    current_time = time.monotonic()
    if _recent_orient and current_time < _reverse_block_until:
        reverse = {"UP":"DOWN","DOWN":"UP","LEFT":"RIGHT","RIGHT":"LEFT"}
        if direction == reverse.get(_recent_orient):
            logger.warning(f"üö´ CH·ªêNG ƒê·∫¢O CHI·ªÄU: B·ªè qua h∆∞·ªõng {direction}")
            return
    
    # KH√îNG SET ORIENT ƒê·∫æN KHI CHECK ARRIVED!
    target_cell = movement_plan["path"][movement_plan["current_target_index"]]
    movement_plan["target_cell"] = target_cell
    
    # T√≠nh to√°n arrival - ki·ªÉm tra BOT ƒê√É TH·ª∞C S·ª∞ ·ªû TRONG TILE TARGET ch∆∞a
    curx, cury = me.get("x", 0.0), me.get("y", 0.0)
    actual_current_cell = pos_to_cell(curx, cury)
    
    # === LOGIC ARRIVAL ===
    # Cell ƒë∆∞·ª£c ƒë√°nh s·ªë t·ª´ 0-15, m·ªói cell 40x40px:
    # - Cell 0: 0-39, Cell 1: 40-79, Cell 2: 80-119, ...
    # 
    # Bot 35x35 ƒë∆∞·ª£c coi l√† "v√†o √¥" khi top-left n·∫±m trong tolerance 5px t·ª´ m√©p tr√°i/tr√™n:
    # V√≠ d·ª• Cell 1 (40-79):
    # - Top-left ph·∫£i t·ª´ 40 ƒë·∫øn 45 (v√¨ bot 35px, 45+34=79 v·∫´n trong √¥)
    # - N·∫øu top-left < 40: ch∆∞a v√†o √¥
    # - N·∫øu top-left > 45: ƒë√£ v√†o qu√° s√¢u (c√≥ th·ªÉ b·ªã overshoot)
    #
    # Arrived khi: pos_to_cell = target V√Ä top-left ƒë√£ v√†o ƒë·ªß s√¢u
    
    cell_start_x = target_cell[0] * CELL_SIZE
    cell_start_y = target_cell[1] * CELL_SIZE
    
    # Check bot top-left n·∫±m trong range h·ª£p l·ªá c·ªßa cell
    # Range: [cell_start, cell_start + 5] v·ªõi tolerance nh·ªè 1px cho bi√™n
    tolerance = 1.0
    in_cell_x = (cell_start_x - tolerance) <= curx <= (cell_start_x + 5 + tolerance)
    in_cell_y = (cell_start_y - tolerance) <= cury <= (cell_start_y + 5 + tolerance)
    
    arrived = (
        actual_current_cell == target_cell and
        in_cell_x and 
        in_cell_y
    )
    
    # T√≠nh remaining pixels ƒë·∫øn target cell  
    goal_center_x = target_cell[0] * CELL_SIZE + CELL_SIZE // 2
    goal_center_y = target_cell[1] * CELL_SIZE + CELL_SIZE // 2
    
    if direction == "RIGHT":
        remain_px = max(0.0, goal_center_x - curx)
    elif direction == "LEFT":
        remain_px = max(0.0, curx - goal_center_x)
    elif direction == "DOWN":
        remain_px = max(0.0, goal_center_y - cury)
    else:  # UP
        remain_px = max(0.0, cury - goal_center_y)
        
    movement_plan["remaining_px"] = float(remain_px)
    
    if arrived:
        logger.info(f"‚úÖ ƒê·∫æN √î: pixel({curx:.1f},{cury:.1f}) tile{actual_current_cell} = target{target_cell}")
        movement_plan["current_target_index"] += 1
        _reverse_block_until = current_time + REVERSE_LOCK_SECONDS
        _recent_orient = direction
        global _stuck_count
        _stuck_count = 0
        # QUAN TR·ªåNG: Clear orient ƒë·ªÉ tr√°nh g·ª≠i command c≈©
        movement_plan["orient"] = None
        return  # Ch·ªù loop ti·∫øp
    else:
        # Ch∆∞a arrived ‚Üí SET ORIENT ƒë·ªÉ bot ti·∫øp t·ª•c di chuy·ªÉn
        movement_plan["orient"] = direction
        # Log tr·∫°ng th√°i di chuy·ªÉn chi ti·∫øt (ch·ªâ khi debug c·∫ßn)
        if remain_px > 0:
            logger.debug(f"üö∂ ƒêI: pixel({curx:.1f},{cury:.1f}) tile{actual_current_cell} ‚Üí target{target_cell}, c√≤n {remain_px:.1f}px")

async def bot_loop():
    """V√≤ng l·∫∑p quy·∫øt ƒë·ªãnh ch√≠nh c·ªßa bot"""
    logger.info(f"ü§ñ B·∫Øt ƒë·∫ßu v√≤ng l·∫∑p bot v·ªõi TICK_HZ={TICK_HZ}")
    await asyncio.sleep(0.2)  # ƒê·ªÉ state ·ªïn ƒë·ªãnh
    
    period = 1.0 / max(TICK_HZ, 1.0)
    
    while True:
        start_time = time.time()
        try:
            # Ki·ªÉm tra tr·∫°ng th√°i bot
            me = get_my_bomber()
            if not me:
                available_bombers = [b.get('name') for b in game_state.get('bombers', [])]
                logger.warning(f"ü§ñ Kh√¥ng t√¨m th·∫•y bot! C√≥ s·∫µn: {available_bombers}")
                
                # Th·ª≠ t√¨m l·∫°i bot n·∫øu c√≥ bombers
                if available_bombers:
                    logger.info("üîÑ Th·ª≠ t√¨m l·∫°i bot...")
                    # Reset my_uid v√† t√¨m l·∫°i
                    game_state["my_uid"] = None
                    # ∆Øu ti√™n ch·ªçn theo BOT_NAME
                    mine = next((b for b in game_state.get("bombers", [])
                                 if isinstance(b.get("name"), str) and b["name"].lower() == BOT_NAME.lower()), None)
                    if mine:
                        game_state["my_uid"] = mine.get("uid")
                        logger.info(f"ü§ñ CH·ªåN L·∫†I BOT THEO T√äN: {mine.get('name')} ({game_state['my_uid']})")
                    else:
                        uids = [b.get("uid") for b in game_state.get("bombers", [])]
                        if uids:
                            game_state["my_uid"] = game_state["bombers"][0].get("uid")
                            logger.info(f"ü§ñ CH·ªåN L·∫†I BOT (FALLBACK): {game_state['bombers'][0].get('name')} ({game_state['my_uid']})")
                    me = get_my_bomber()  # Th·ª≠ l·∫•y l·∫°i
            
            # Ki·ªÉm tra game c√≥ ho·∫°t ƒë·ªông kh√¥ng
            game_active = game_state["connected"] and (game_state["game_started"] or os.getenv("ENVIRONMENT", "prod") == "dev")
            
            # Ki·ªÉm tra map c√≥ s·∫µn s√†ng kh√¥ng (tr√°nh l·ªói sau khi h·ªìi sinh)
            map_ready = game_state.get("map") and len(game_state.get("map", [])) > 0
            
            if not map_ready and game_active:
                logger.info(f"üó∫Ô∏è CH·ªú MAP: Map ch∆∞a s·∫µn s√†ng sau khi h·ªìi sinh, t·∫°m d·ª´ng AI")
            
            if game_active and me and map_ready:
                # Ki·ªÉm tra v·ªã tr√≠ bot c√≥ h·ª£p l·ªá kh√¥ng
                current_cell = pos_to_cell(me.get("x", 0), me.get("y", 0))
                if not (1 <= current_cell[0] <= 14 and 1 <= current_cell[1] <= 14):
                    logger.warning(f"üö´ BOT ·ªû V·ªä TR√ç KH√îNG H·ª¢P L·ªÜ: {current_cell} - T·∫°m d·ª´ng AI")
                    await asyncio.sleep(period)
                    continue
                
                # Khai b√°o t·∫•t c·∫£ bi·∫øn global c·∫ßn thi·∫øt
                global _arrival_block_until, _last_pos, _stuck_count, _recent_orient, _reverse_block_until
                
                # N·∫øu v·ª´a t·ªõi n∆°i, t·∫°m kh√¥ng nh·∫≠n action/fallback ƒë·ªÉ tr√°nh ƒë·∫£o chi·ªÅu (dwell)
                if time.monotonic() < _arrival_block_until:
                    await asyncio.sleep(period)
                    continue
                
                # B·ªé QUA stuck detection ƒë·ªÉ bot lu√¥n c√≥ th·ªÉ di chuy·ªÉn
                # cur_pos = (me.get("x", 0.0), me.get("y", 0.0))
                # if abs(cur_pos[0] - _last_pos[0]) < 0.1 and abs(cur_pos[1] - _last_pos[1]) < 0.1:
                #     _stuck_count += 1
                #     if _stuck_count >= 20:  
                #         logger.info(f"üö´ STUCK: Bot kh√¥ng di chuy·ªÉn trong {_stuck_count} tick, t·∫°m d·ª´ng movement")
                #         _reset_movement_plan()
                #         _arrival_block_until = time.monotonic() + 0.1
                #         await asyncio.sleep(period)
                #         continue
                # else:
                #     _stuck_count = 0
                # _last_pos = cur_pos
                
                # Check v√† log khi bot v√†o √¥ m·ªõi
                movement_logger.check_and_log_cell_arrival()
                
                # T·∫°m th·ªùi lo·∫°i b·ªè border detection v√¨ qu√° nghi√™m ng·∫∑t
                # Bot c·∫ßn ƒë∆∞·ª£c ph√©p di chuy·ªÉn ra kh·ªèi v√πng bi√™n gi·ªõi
                did_progress = False
                # CHECK DELAY TR∆Ø·ªöC - ∆Øu ti√™n cao nh·∫•t!
                if movement_plan.get("just_completed"):
                    completed_time = movement_plan["just_completed"]
                    if time.time() - completed_time < 1.0:  # Skip 1 gi√¢y ƒë·ªÉ AI x·ª≠ l√Ω
                        await asyncio.sleep(period)
                        continue
                    else:
                        # ƒê√£ ƒë·ªß th·ªùi gian ch·ªù, x√≥a flag
                        movement_plan.pop("just_completed", None)
                
                # ∆Øu ti√™n ti·∫øp t·ª•c plan d√†i h·∫°n hi·ªán t·∫°i
                if movement_plan["path_valid"] and movement_plan["path"]:
                    if movement_plan.get("skip_once"):
                        movement_plan["skip_once"] = False
                    else:
                        _advance_move_plan()
                        current_orient = movement_plan["orient"]
                        if current_orient and current_orient in DIRECTIONS:
                            await _maybe_emit_move(current_orient)
                            # Reset stuck counter khi c√≥ movement command
                            _stuck_count = 0
                            did_progress = True
                else:
                    
                    # Kh√¥ng c√≥ plan: h·ªèi AI v√† l·∫≠p plan m·ªõi
                    action = choose_next_action()
                    
                    # N·∫øu AI quy·∫øt ƒë·ªãnh ƒë·ª©ng im qu√° l√¢u, th·ª≠ fallback ƒë·ªÉ tho√°t kh·ªèi t√¨nh tr·∫°ng b·ªã k·∫πt
                    if action is None:
                        global _last_ai_idle_time
                        current_time = time.time() * 1000
                        if '_last_ai_idle_time' not in globals():
                            _last_ai_idle_time = current_time
                        
                        idle_duration = current_time - _last_ai_idle_time
                        if idle_duration > 10000:  # 10 gi√¢y
                            logger.warning(f"üö® AI ƒê·ª®NG IM QU√Å L√ÇU: {idle_duration:.0f}ms")
                            # B·ªè qua vi·ªác ƒë√°nh d·∫•u did_progress ƒë·ªÉ cho ph√©p fallback
                            did_progress = False
                            _last_ai_idle_time = current_time
                        else:
                            _last_ai_idle_time = current_time
                    if action:
                        if action["type"] == "move":
                            # Log v·ªã tr√≠ bot hi·ªán t·∫°i
                            me = get_my_bomber()
                            if me:
                                current_cell = pos_to_cell(me.get("x", 0), me.get("y", 0))
                                logger.info(f"ü§ñ V·ªä TR√ç BOT: ({me.get('x', 0):.1f}, {me.get('y', 0):.1f}) ‚Üí √¥ {current_cell}")
                            
                            # Log b·∫£n ƒë·ªì tr∆∞·ªõc khi ph√¢n t√≠ch plan
                            log_map_state()
                            
                            # L·∫≠p plan d√†i h·∫°n ƒë·∫øn m·ª•c ti√™u
                            goal_cell = action.get("goal_cell")
                            if goal_cell:
                                _plan_long_term_path(goal_cell)
                                # L·∫•y h∆∞·ªõng ƒë·∫ßu ti√™n v√† g·ª≠i ngay
                                direction = _get_next_direction_from_path()
                                if direction:
                                    await _maybe_emit_move(direction)
                            movement_plan["skip_once"] = True
                            _stuck_count = 0
                            did_progress = True
                        elif action["type"] == "bomb":
                            await send_bomb()
                            did_progress = True
                        else:
                            # Fallback: di chuy·ªÉn 1 √¥
                            direction = action["orient"]
                            # Ch·ªëng ƒë·∫£o chi·ªÅu
                            if _recent_orient and time.monotonic() < _reverse_block_until:
                                reverse = {"UP":"DOWN","DOWN":"UP","LEFT":"RIGHT","RIGHT":"LEFT"}
                                if direction == reverse.get(_recent_orient):
                                    direction = None
                            if direction:
                                await _maybe_emit_move(direction)
                            _stuck_count = 0
                            did_progress = True
                    else:
                        # Reset plan c≈© khi AI quy·∫øt ƒë·ªãnh ƒë·ª©ng im
                        if movement_plan["path"]:
                            _reset_movement_plan()
                        # KH√îNG ƒë√°nh d·∫•u did_progress ƒë·ªÉ cho ph√©p fallback
                        did_progress = False
                        
                # FALLBACK LU√îN HO·∫†T ƒê·ªòNG: ƒê·∫£m b·∫£o bot lu√¥n c√≥ h√†nh ƒë·ªông
                if not did_progress:
                    try:
                        # LU√îN th·ª≠ di chuy·ªÉn b·∫•t k·ª≥ h∆∞·ªõng n√†o ƒë·ªÉ tr√°nh b·ªã k·∫πt
                        for orient in ["UP", "DOWN", "LEFT", "RIGHT"]:
                            await _maybe_emit_move(orient)
                            # Reset stuck counter khi c√≥ fallback movement
                            _stuck_count = 0
                            break
                                
                    except Exception as e:
                        logger.error(f"ü§ñ FALLBACK ERROR: {e}")
            
            # Flush log di chuy·ªÉn ƒë·ªãnh k·ª≥
            movement_logger.flush()
            
            await asyncio.sleep(period)
            
        except asyncio.CancelledError:
            logger.info(f"ü§ñ V√≤ng l·∫∑p bot b·ªã h·ªßy")
            break
        except Exception as e:
            logger.exception(f"L·ªói v√≤ng l·∫∑p bot: {e}")
            await asyncio.sleep(0.1)

# ---------- Startup ----------
async def startup():
    """Kh·ªüi t·∫°o k·∫øt n·ªëi bot v√† b·∫Øt ƒë·∫ßu v√≤ng l·∫∑p quy·∫øt ƒë·ªãnh"""
    # B·∫Øt ƒë·∫ßu k·∫øt n·ªëi trong background
    asyncio.create_task(connect_and_start_bot())

async def connect_and_start_bot():
    """T√°c v·ª• background ƒë·ªÉ x·ª≠ l√Ω k·∫øt n·ªëi v√† v√≤ng l·∫∑p bot"""
    # Ch·ªù m·ªôt ch√∫t ƒë·ªÉ event loop s·∫µn s√†ng
    await asyncio.sleep(2)
    
    while True:
        try:
            await sio.connect(SOCKET_SERVER, transports=["websocket"], auth={"token": TOKEN})
            break
        except Exception as e:
            logger.error(f"K·∫øt n·ªëi th·∫•t b·∫°i: {e}; th·ª≠ l·∫°i sau 3s")
            await asyncio.sleep(3)
    
    # B·∫Øt ƒë·∫ßu v√≤ng l·∫∑p bot
    bot_task = asyncio.create_task(bot_loop())
