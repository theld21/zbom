#!/usr/bin/env python3
"""
Bot Bomberman - Zinza Hackathon 2025
Bot AI ƒë∆°n gi·∫£n v·ªõi chi·∫øn l∆∞·ª£c sinh t·ªìn
"""

import asyncio
import logging
import os
import time
from contextlib import asynccontextmanager

# Import c√°c module c·∫ßn thi·∫øt
from aiolimiter import AsyncLimiter
from fastapi import FastAPI
import socketio

# Import config v√† modules
from .config import (
    SOCKET_SERVER, TOKEN, TICK_HZ, MAX_CMDS_PER_SEC, CELL_SIZE, LOG_LEVEL, BOT_NAME,
    REVERSE_LOCK_SECONDS, DIRECTIONS, LOG_MOVEMENT, LOG_MAP
)
from .game_state import game_state, get_my_bomber, pos_to_cell
from .survival_ai import choose_next_action
from .socket_handlers import (
    handle_connect, handle_disconnect, handle_user, handle_start, 
    handle_finish, handle_player_move, handle_new_bomb, 
    handle_bomb_explode, handle_map_update, handle_item_collected,
    handle_chest_destroyed, handle_new_enemy, handle_user_die_update,
    handle_user_disconnect, handle_new_life
)

# Import utils
from .utils.loggers import MovementLogger, log_map_state
from .movement import get_movement_planner
from .bot_controller import get_bot_controller

# Gi·ªõi h·∫°n t·ªëc ƒë·ªô g·ª≠i l·ªánh
cmd_limiter = AsyncLimiter(max_rate=MAX_CMDS_PER_SEC, time_period=1)
logger = logging.getLogger("bot")

# Kh·ªüi t·∫°o c√°c utilities
movement_logger = MovementLogger()
movement_planner = get_movement_planner()

# Compatibility: movement_plan tr·ªè ƒë·∫øn planner.plan
movement_plan = movement_planner.plan

# Kh·ªüi t·∫°o Socket.IO client
sio = socketio.AsyncClient(
    reconnection=True, 
    reconnection_attempts=0, 
    logger=False, 
    engineio_logger=False
)

# ---------- Ack logging helpers ----------
def _ack_logger(event_name: str):
    def _cb(res=None):
        try:
            logger.info(f"ACK {event_name}: {res}")
        except Exception:
            pass
    return _cb

# ƒê√£ chuy·ªÉn sang BotController

@asynccontextmanager
async def lifespan(app: FastAPI):
    """Qu·∫£n l√Ω v√≤ng ƒë·ªùi FastAPI"""
    # C·∫•u h√¨nh m·ª©c log theo LOG_LEVEL
    try:
        level = getattr(logging, LOG_LEVEL, logging.INFO)
        logging.basicConfig(level=level)
        logger.setLevel(level)
    except Exception:
        pass
    logger.info("üöÄ Kh·ªüi ƒë·ªông bot...")
    try:
        await startup()
        logger.info("üöÄ Bot ƒë√£ s·∫µn s√†ng")
    except Exception as e:
        logger.error(f"üöÄ L·ªói kh·ªüi ƒë·ªông: {e}")
    yield
    logger.info("üöÄ Bot ƒë√£ d·ª´ng")

app = FastAPI(lifespan=lifespan)

# ---------- API Endpoints ----------
@app.get("/healthz")
async def health_check():
    """Ki·ªÉm tra tr·∫°ng th√°i bot"""
    return {
        "status": "ok", 
        "connected": game_state["connected"], 
        "started": game_state["game_started"]
    }

@app.get("/state")
async def get_state():
    """L·∫•y tr·∫°ng th√°i game hi·ªán t·∫°i"""
    me = get_my_bomber()
    return {
        "connected": game_state["connected"],
        "started": game_state["game_started"],
        "my_uid": game_state["my_uid"],
        "me": me,
        "bombs": len(game_state.get("bombs", [])),
        "items": len(game_state.get("items", [])),
        "chests": len(game_state.get("chests", [])),
    }


# ---------- Socket Event Handlers ----------
@sio.event
async def connect():
    """X·ª≠ l√Ω k·∫øt n·ªëi socket"""
    handle_connect()
    
    # G·ª≠i y√™u c·∫ßu tham gia ngay sau khi k·∫øt n·ªëi
    try:
        await sio.emit("join", {})
    except Exception as e:
        logger.error(f"L·ªói g·ª≠i join: {e}")

@sio.event
async def connect_error(data):
    """X·ª≠ l√Ω l·ªói k·∫øt n·ªëi"""
    logger.error(f"L·ªói k·∫øt n·ªëi: {data}")

@sio.event
async def disconnect():
    """X·ª≠ l√Ω ng·∫Øt k·∫øt n·ªëi"""
    handle_disconnect()

@sio.on("user")
async def on_user(data=None):
    """X·ª≠ l√Ω s·ª± ki·ªán user"""
    handle_user(data or {})

@sio.on("start")
async def on_start(data=None):
    """X·ª≠ l√Ω s·ª± ki·ªán b·∫Øt ƒë·∫ßu game"""
    logger.info(f"üéÆ GAME B·∫ÆT ƒê·∫¶U")
    handle_start(data or {})

@sio.on("finish")
async def on_finish(data=None):
    """X·ª≠ l√Ω s·ª± ki·ªán k·∫øt th√∫c game"""
    logger.info(f"üèÅ GAME K·∫æT TH√öC")
    handle_finish(data or {})

@sio.on("player_move")
async def on_player_move(data=None):
    """X·ª≠ l√Ω s·ª± ki·ªán di chuy·ªÉn player"""
    handle_player_move(data or {})

@sio.on("new_bomb")
async def on_new_bomb(data=None):
    """X·ª≠ l√Ω s·ª± ki·ªán bom m·ªõi"""
    handle_new_bomb(data or {})

@sio.on("bomb_explode")
async def on_bomb_explode(data=None):
    """X·ª≠ l√Ω s·ª± ki·ªán bom n·ªï"""
    handle_bomb_explode(data or {})

@sio.on("map_update")
async def on_map_update(data=None):
    """X·ª≠ l√Ω s·ª± ki·ªán c·∫≠p nh·∫≠t map"""
    handle_map_update(data or {})

@sio.on("item_collected")
async def on_item_collected(data=None):
    """X·ª≠ l√Ω s·ª± ki·ªán nh·∫∑t item"""
    handle_item_collected(data or {})

@sio.on("chest_destroyed")
async def on_chest_destroyed(data=None):
    """X·ª≠ l√Ω s·ª± ki·ªán r∆∞∆°ng b·ªã ph√°"""
    handle_chest_destroyed(data or {})

@sio.on("new_enemy")
async def on_new_enemy(data=None):
    """X·ª≠ l√Ω s·ª± ki·ªán bot m·ªõi tham gia"""
    handle_new_enemy(data or {})

@sio.on("user_die_update")
async def on_user_die_update(data=None):
    """X·ª≠ l√Ω s·ª± ki·ªán bot b·ªã h·∫° g·ª•c"""
    handle_user_die_update(data or {})

@sio.on("user_disconnect")
async def on_user_disconnect(data=None):
    """X·ª≠ l√Ω s·ª± ki·ªán bot tho√°t kh·ªèi ph√≤ng"""
    handle_user_disconnect(data or {})

@sio.on("new_life")
async def on_new_life(data=None):
    """X·ª≠ l√Ω s·ª± ki·ªán bot h·ªìi sinh"""
    handle_new_life(data or {})

# ---------- Bot Actions ----------
async def send_move(orient: str):
    """G·ª≠i l·ªánh di chuy·ªÉn v·ªõi gi·ªõi h·∫°n t·ªëc ƒë·ªô"""
    if orient not in DIRECTIONS:
        return
    
    if not game_state.get("game_started", False):
        if os.getenv("ENVIRONMENT", "prod") != "dev":
            logger.warning(f"üö´ KH√îNG TH·ªÇ DI CHUY·ªÇN: Game ch∆∞a b·∫Øt ƒë·∫ßu - {orient}")
            return
    
    try:
        async with cmd_limiter:
            await sio.emit("move", {"orient": orient}, callback=_ack_logger("move"))
        movement_logger.log_movement(orient, LOG_MOVEMENT)
    except Exception as e:
        logger.error(f"‚ùå L·ªói di chuy·ªÉn: {e}")

async def send_bomb():
    """G·ª≠i l·ªánh ƒë·∫∑t bom"""
    # Ki·ªÉm tra game ƒë√£ b·∫Øt ƒë·∫ßu ch∆∞a
    if not game_state.get("game_started", False):
        # Trong m√¥i tr∆∞·ªùng dev, cho ph√©p ƒë·∫∑t bom m√† kh√¥ng c·∫ßn start event
        if os.getenv("ENVIRONMENT", "prod") == "dev":
            logger.info(f"üí£ CH·∫æ ƒê·ªò DEV: Cho ph√©p ƒë·∫∑t bom m√† kh√¥ng c·∫ßn start event")
        else:
            logger.warning(f"üö´ KH√îNG TH·ªÇ ƒê·∫∂T BOM: Game ch∆∞a b·∫Øt ƒë·∫ßu - ch·ªù start event")
            return
    
    try:
        async with cmd_limiter:
            await sio.emit("place_bomb", {}, callback=_ack_logger("place_bomb"))
        logger.info(f"üí£ ƒê·∫∂T BOM")
        
        # C·∫≠p nh·∫≠t s·ªë bom local
        my_uid = game_state.get("my_uid")
        if my_uid:
            for bomber in game_state["bombers"]:
                if bomber.get("uid") == my_uid:
                    bomber["bombCount"] = max(0, bomber.get("bombCount", 1) - 1)
                    break
    except Exception as e:
        logger.error(f"L·ªói ƒë·∫∑t bom: {e}")

# ---------- Bot Logic ----------
def reset_global_state() -> None:
    """Reset to√†n b·ªô global state khi game k·∫øt th√∫c"""
    controller = get_bot_controller()
    controller.reset()
    movement_planner.reset()
    movement_logger.reset()
    logger.info("üîÑ GLOBAL RESET: ƒê√£ reset to√†n b·ªô global state")

async def _send_move(orient: str):
    """Helper ƒë·ªÉ g·ª≠i move v·ªõi rate limiting"""
    controller = get_bot_controller()
    if controller.can_emit_move_now(MAX_CMDS_PER_SEC):
        await send_move(orient)
        controller.update_last_move_time()
        movement_planner.recent_orient = orient

async def _try_find_bot():
    """Helper ƒë·ªÉ t√¨m l·∫°i bot"""
    available = [b.get('name') for b in game_state.get('bombers', [])]
    logger.warning(f"üîç Kh√¥ng t√¨m th·∫•y bot! C√≥: {available}")
    
    if available:
        game_state["my_uid"] = None
        mine = next((b for b in game_state.get("bombers", [])
                    if isinstance(b.get("name"), str) and 
                    b["name"].lower() == BOT_NAME.lower()), None)
        if mine:
            game_state["my_uid"] = mine.get("uid")
            logger.info(f"ü§ñ CH·ªåN L·∫†I: {mine.get('name')} ({game_state['my_uid']})")
        else:
            uids = [b.get("uid") for b in game_state.get("bombers", [])]
            if uids:
                game_state["my_uid"] = game_state["bombers"][0].get("uid")
                logger.info(f"ü§ñ FALLBACK: {game_state['bombers'][0].get('name')}")

async def bot_loop():
    """V√≤ng l·∫∑p quy·∫øt ƒë·ªãnh - ƒê∆†N GI·∫¢N H√ìA"""
    from .survival_ai import choose_next_action, survival_ai
    
    controller = get_bot_controller()
    logger.info(f"ü§ñ B·∫Øt ƒë·∫ßu bot loop (TICK_HZ={TICK_HZ})")
    await asyncio.sleep(0.2)
    
    period = 1.0 / max(TICK_HZ, 1.0)
    
    while True:
        if not game_state.get("game_started", False):
            await asyncio.sleep(0.5)
            continue
        
        try:
            # 1. Ki·ªÉm tra bot
            me = get_my_bomber()
            if not me:
                await _try_find_bot()
                await asyncio.sleep(period)
                continue
            
            # 2. Ki·ªÉm tra map
            if not game_state.get("map") or len(game_state.get("map", [])) == 0:
                logger.debug("üó∫Ô∏è CH·ªú MAP")
                await asyncio.sleep(period)
                continue
            
            # 3. Ki·ªÉm tra v·ªã tr√≠ h·ª£p l·ªá
            current_cell = pos_to_cell(me.get("x", 0), me.get("y", 0))
            if not (0 <= current_cell[0] <= 15 and 0 <= current_cell[1] <= 15):
                logger.warning(f"üö´ V·ªä TR√ç KH√îNG H·ª¢P L·ªÜ: {current_cell}")
                await asyncio.sleep(period)
                continue
            
            # 4. Check arrival block
            if controller.is_in_arrival_block():
                await asyncio.sleep(period)
                continue
            
            # 5. Log cell arrival
            movement_logger.check_and_log_cell_arrival(LOG_MOVEMENT)
            
            # 6. X·ª≠ l√Ω plan completion
            did_action = await controller.handle_plan_completion(
                movement_planner, survival_ai, send_bomb
            )
            if did_action:
                await asyncio.sleep(period)
                continue
            
            # 7. Ti·∫øp t·ª•c plan hi·ªán t·∫°i
            if movement_plan["path_valid"] and movement_plan["path"]:
                did_progress = await controller.execute_plan_continuation(
                    movement_planner, _send_move, CELL_SIZE, REVERSE_LOCK_SECONDS
                )
                if did_progress:
                    await asyncio.sleep(period)
                    continue
                
                # Clear plan n·∫øu ho√†n th√†nh
                if not movement_plan["path_valid"] or not movement_plan["path"]:
                    if not movement_plan.get("bomb_placed"):
                        survival_ai.current_plan = None
                        logger.info(f"‚úÖ CLEAR PLAN: ƒê√£ ho√†n th√†nh")
            
            # 8. H·ªèi AI action m·ªõi
            action = choose_next_action()
            if action:
                did_progress = await controller.execute_action(
                    action, _send_move, send_bomb, movement_planner, 
                    survival_ai, game_state, CELL_SIZE, REVERSE_LOCK_SECONDS, LOG_MAP
                )
                if did_progress:
                    await asyncio.sleep(period)
                    continue
            else:
                # Kh√¥ng c√≥ action ‚Üí KH√îNG sleep, l·∫∑p l·∫°i ngay ƒë·ªÉ h·ªèi AI li√™n t·ª•c
                # cho ƒë·∫øn khi c√≥ action m·ªõi (sau khi ho√†n th√†nh plan)
                await asyncio.sleep(0.05)  # Sleep r·∫•t ng·∫Øn ƒë·ªÉ tr√°nh spam CPU
                continue
            
            # 9. Kh√¥ng c√≥ fallback random - Bot s·∫Ω ƒë·ª£i survival_ai t·∫°o plan m·ªõi
            # (X√≥a fallback random ƒë·ªÉ tr√°nh bot ƒëi lung tung khi plan b·ªã reset)
                
        except Exception as e:
            logger.exception(f"‚ùå L·ªói bot loop: {e}")
            
            await asyncio.sleep(period)

# ---------- Startup ----------
async def startup():
    """Kh·ªüi t·∫°o k·∫øt n·ªëi bot v√† b·∫Øt ƒë·∫ßu v√≤ng l·∫∑p quy·∫øt ƒë·ªãnh"""
    # B·∫Øt ƒë·∫ßu k·∫øt n·ªëi trong background
    asyncio.create_task(connect_and_start_bot())

async def connect_and_start_bot():
    """T√°c v·ª• background ƒë·ªÉ x·ª≠ l√Ω k·∫øt n·ªëi v√† v√≤ng l·∫∑p bot"""
    # Ch·ªù m·ªôt ch√∫t ƒë·ªÉ event loop s·∫µn s√†ng
    await asyncio.sleep(2)
    
    while True:
        try:
            await sio.connect(SOCKET_SERVER, transports=["websocket"], auth={"token": TOKEN})
            break
        except Exception as e:
            logger.error(f"K·∫øt n·ªëi th·∫•t b·∫°i: {e}; th·ª≠ l·∫°i sau 3s")
            await asyncio.sleep(3)
    
    # Ki·ªÉm tra m√¥i tr∆∞·ªùng dev v√† b·∫≠t game_started
    if os.getenv("ENVIRONMENT", "prod") == "dev":
        game_state["game_started"] = True
        logger.info("üîß M√îI TR∆Ø·ªúNG DEV T·ª∞ CH·∫†Y BOT")
    
    # B·∫Øt ƒë·∫ßu v√≤ng l·∫∑p bot
    bot_task = asyncio.create_task(bot_loop())
