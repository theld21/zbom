"""Movement Logger - Ghi log di chuy·ªÉn c·ªßa bot"""
import logging
from typing import Optional, Tuple

logger = logging.getLogger(__name__)

class MovementLogger:
    """H·ªá th·ªëng log di chuy·ªÉn ƒë∆°n gi·∫£n"""
    
    def __init__(self):
        self.current_direction: Optional[str] = None
        self.last_logged_cell: Optional[Tuple[int, int]] = None
        
    def log_movement(self, direction: str, log_enabled: bool = True):
        """Log di chuy·ªÉn - ch·ªâ log khi thay ƒë·ªïi h∆∞·ªõng"""
        if not log_enabled:
            return
            
        if self.current_direction != direction:
            self.current_direction = direction
            
            # Import ƒë·ªông ƒë·ªÉ tr√°nh circular import
            from ..game_state import get_my_bomber, pos_to_cell
            
            me = get_my_bomber()
            if me:
                px, py = me.get("x", 0), me.get("y", 0)
                current_cell = pos_to_cell(px, py)
                logger.info(f"üö∂ DI CHUY·ªÇN: pixel({px:.1f},{py:.1f}) tile{current_cell} ‚Üí {direction}")
            else:
                logger.info(f"üö∂ DI CHUY·ªÇN: {direction}")
    
    def check_and_log_cell_arrival(self, log_enabled: bool = True):
        """Ki·ªÉm tra v√† log khi bot v√†o √¥ m·ªõi"""
        if not log_enabled:
            return
            
        # Import ƒë·ªông ƒë·ªÉ tr√°nh circular import
        from ..game_state import get_my_bomber, pos_to_cell
        
        me = get_my_bomber()
        if not me:
            return
        
        px, py = me.get("x", 0), me.get("y", 0)
        current_cell = pos_to_cell(px, py)
        
        # Ch·ªâ log khi v√†o √¥ M·ªöI v√† ƒë√£ t·ªõi ch√≠nh x√°c (s·ªë nguy√™n)
        # S·ªë nguy√™n = ƒë√£ t·ªõi ch√≠nh x√°c √¥
        # S·ªë l·∫ª (.5) = ƒëang ·ªü gi·ªØa cell, ch∆∞a t·ªõi
        
        from ..game_state import is_at_exact_cell
        
        if is_at_exact_cell(px, py) and current_cell != self.last_logged_cell:
            logger.info(f"üìç V√ÄO √î: pixel({px:.1f},{py:.1f}) ‚Üí tile{current_cell}")
            self.last_logged_cell = current_cell
    
    def reset(self):
        """Reset logger state"""
        self.current_direction = None
        self.last_logged_cell = None
    
    def flush(self):
        """Placeholder for compatibility"""
        pass

