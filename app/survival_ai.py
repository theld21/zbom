#!/usr/bin/env python3
"""
AI sinh t·ªìn ƒë∆°n gi·∫£n - Chi·∫øn l∆∞·ª£c ∆∞u ti√™n an to√†n
"""

import time
import logging
from typing import List, Tuple, Optional, Dict, Any

from .config import DIRECTIONS, CELL_SIZE_PIXELS
from .game_state import (
    game_state, get_my_bomber, get_my_cell, get_bomber_explosion_range, 
    get_bomber_speed, get_bomber_bomb_count,
    get_tile_item, has_chest_at_tile, has_wall_at_tile, in_bounds,
    get_fast_state, bfs_shortest_path, astar_shortest_path, pos_to_cell, pos_to_cell_bot
)

logger = logging.getLogger(__name__)

class SimpleSurvivalAI:
    """AI sinh t·ªìn th√¥ng minh v·ªõi b·ªô nh·ªõ v√† chi·∫øn l∆∞·ª£c"""
    
    def __init__(self):
        self.last_action_time = 0
        self.last_action = None
        self.action_count = 0
        self.last_bomb_time_ms = 0.0
        
        # B·ªô nh·ªõ kh√°m ph√° - tr√°nh quay l·∫°i n∆°i ƒë√£ ƒëi
        self.visited_cells = set()
        self.exploration_targets = []
        self.last_exploration_time = 0
        self.exploration_radius = 5
        
        # Chi·∫øn l∆∞·ª£c d√†i h·∫°n
        self.strategic_goals = []
        self.current_goal = None
        self.goal_priority = {
            'survival': 100,
            'items': 80,
            'exploration': 60,
            'bombing': 40
        }
        
        # Tr√°nh oscillation
        self.movement_history = []
        self.oscillation_threshold = 3
        
        # Logic bom li√™n t·ª•c
        self.my_bombs = set()  # Theo d√µi bom c·ªßa m√¨nh
        self.bomb_exploded_time = 0.0  # Th·ªùi gian bom n·ªï cu·ªëi c√πng
        self.continuous_bombing = True  # B·∫≠t ch·∫ø ƒë·ªô ƒë·∫∑t bom li√™n t·ª•c
        
        # Blacklist c√°c v·ªã tr√≠ ƒë√£ th·ª≠ v√† th·∫•t b·∫°i
        self.failed_bomb_positions = {}  # {position: timestamp} - v·ªã tr√≠ ƒë√£ th·ª≠ v√† th·∫•t b·∫°i
        self.blacklist_duration = 10000  # 10 gi√¢y blacklist
        
        # Plan hi·ªán t·∫°i
        self.current_plan = None
        
        # Flag tho√°t hi·ªÉm
        self.must_escape_bomb = False  # B·∫ÆT BU·ªòC tho√°t sau khi ƒë·∫∑t bom
        
        # Theo d√µi v·ªã tr√≠ ƒë·ªÉ ph√°t hi·ªán h·ªìi sinh
        self._last_position = None
    
    def reset_state(self):
        """Reset AI state v·ªÅ tr·∫°ng th√°i ban ƒë·∫ßu"""
        self.last_action_time = 0
        self.last_action = None
        self.action_count = 0
        self.last_bomb_time_ms = 0.0
        self.visited_cells.clear()
        self.exploration_targets.clear()
        self.last_exploration_time = 0
        self.strategic_goals.clear()
        self.current_goal = None
        self.movement_history.clear()
        self.my_bombs.clear()
        self.bomb_exploded_time = 0.0
        self.failed_bomb_positions.clear()
        self.current_plan = None
        self.must_escape_bomb = False
        
        # Reset oscillation detector n·∫øu c√≥
        if hasattr(self, '_oscillation_detector'):
            self._oscillation_detector.clear()
        
        # Reset v·ªã tr√≠ theo d√µi
        self._last_position = None
        
        logger.info(f"üîÑ AI RESET: ƒê√£ reset to√†n b·ªô tr·∫°ng th√°i AI")
        
    def _get_move_time_ms(self, my_uid: str) -> float:
        """T√≠nh th·ªùi gian di chuy·ªÉn 1 b∆∞·ªõc (ms) d·ª±a tr√™n t·ªëc ƒë·ªô"""
        speed = get_bomber_speed(my_uid)
        # T·ªëc ƒë·ªô 1 = 1px/b∆∞·ªõc, t·ªëc ƒë·ªô 2 = 2px/b∆∞·ªõc, t·ªëc ƒë·ªô 3 = 3px/b∆∞·ªõc
        # Th·ªùi gian di chuy·ªÉn = 1000ms / t·ªëc ƒë·ªô
        return 1000.0 / speed
        
    def _update_visited_cells(self, cell: Tuple[int, int]):
        """C·∫≠p nh·∫≠t b·ªô nh·ªõ c√°c √¥ ƒë√£ thƒÉm"""
        self.visited_cells.add(cell)
        # Gi·ªØ t·ªëi ƒëa 50 √¥ g·∫ßn nh·∫•t
        if len(self.visited_cells) > 50:
            # X√≥a c√°c √¥ c≈© nh·∫•t
            old_cells = list(self.visited_cells)[:-50]
            for old_cell in old_cells:
                self.visited_cells.discard(old_cell)
    
    def _is_oscillating(self) -> bool:
        """Ki·ªÉm tra xem c√≥ ƒëang oscillation kh√¥ng"""
        if len(self.movement_history) < self.oscillation_threshold * 2:
            return False
            
        # Ki·ªÉm tra pattern A-B-A-B
        recent = self.movement_history[-self.oscillation_threshold * 2:]
        for i in range(0, len(recent) - 1, 2):
            if i + 1 < len(recent) and recent[i] == recent[i + 1]:
                return False
        return True
    
    def _get_exploration_targets(self, current_cell: Tuple[int, int]) -> List[Tuple[int, int]]:
        """T√¨m c√°c m·ª•c ti√™u kh√°m ph√° ch∆∞a ƒë∆∞·ª£c thƒÉm"""
        targets = []
        for dx in range(-self.exploration_radius, self.exploration_radius + 1):
            for dy in range(-self.exploration_radius, self.exploration_radius + 1):
                if dx == 0 and dy == 0:
                    continue
                target = (current_cell[0] + dx, current_cell[1] + dy)
                if (0 <= target[0] <= 15 and 0 <= target[1] <= 15 and 
                    target not in self.visited_cells and 
                    self._is_cell_passable(target)):
                    targets.append(target)
        return targets
    
    def _get_strategic_goal(self, current_cell: Tuple[int, int]) -> Optional[Tuple[int, int]]:
        """L·∫≠p k·∫ø ho·∫°ch chi·∫øn l∆∞·ª£c th√¥ng minh - TR√ÅNH V√íNG L·∫∂P"""
        # Ki·ªÉm tra v·ªã tr√≠ hi·ªán t·∫°i c√≥ h·ª£p l·ªá kh√¥ng
        if not (0 <= current_cell[0] <= 15 and 0 <= current_cell[1] <= 15):
            logger.warning(f"üö´ V·ªä TR√ç KH√îNG H·ª¢P L·ªÜ: {current_cell} - T√¨m v·ªã tr√≠ an to√†n g·∫ßn nh·∫•t")
            # T√¨m v·ªã tr√≠ an to√†n g·∫ßn nh·∫•t trong map
            for radius in range(1, 8):
                for dx in range(-radius, radius + 1):
                    for dy in range(-radius, radius + 1):
                        target = (current_cell[0] + dx, current_cell[1] + dy)
                        if (0 <= target[0] <= 15 and 0 <= target[1] <= 15 and 
                            self._is_cell_passable(target)):
                            logger.info(f"üéØ T√åM TH·∫§Y V·ªä TR√ç AN TO√ÄN: {target}")
                            return target
            return None
        
        # 1. ∆Øu ti√™n sinh t·ªìn - t√¨m n∆°i an to√†n (∆∞u ti√™n √¥ ch∆∞a thƒÉm)
        # Convert float to int for safe areas calculation
        current_cell_int = (int(current_cell[0]), int(current_cell[1]))
        safe_goals = self._find_safe_areas(current_cell_int)
        if safe_goals:
            # ∆Øu ti√™n √¥ ch∆∞a thƒÉm
            unexplored_safe = [goal for goal in safe_goals if goal not in self.visited_cells]
            if unexplored_safe:
                logger.info(f"üéØ CH·ªåN V√ôNG AN TO√ÄN CH∆ØA THƒÇM: {unexplored_safe[0]}")
                return unexplored_safe[0]
            else:
                logger.info(f"üéØ CH·ªåN V√ôNG AN TO√ÄN: {safe_goals[0]}")
                return safe_goals[0]
            
        # 2. T√¨m v·∫≠t ph·∫©m quan tr·ªçng
        item_goals = self._find_important_items(current_cell)
        if item_goals:
            logger.info(f"üéØ CH·ªåN ITEM QUAN TR·ªåNG: {item_goals[0]}")
            return item_goals[0]
            
        # 3. Kh√°m ph√° khu v·ª±c m·ªõi (∆∞u ti√™n √¥ xa)
        exploration_goals = self._get_exploration_targets(current_cell)
        if exploration_goals:
            logger.info(f"üéØ CH·ªåN KH√ÅM PH√Å: {exploration_goals[0]}")
            return exploration_goals[0]
        
        # 4. Fallback: T√¨m √¥ an to√†n b·∫•t k·ª≥ (tr√°nh v√≤ng l·∫∑p)
        safe_goal = self._find_safe_goal(current_cell, time.time() * 1000)
        if safe_goal:
            logger.info(f"üéØ FALLBACK AN TO√ÄN: {safe_goal}")
            return safe_goal
            
        return None
    
    def _execute_long_term_plan(self, plan: Dict, current_cell: Tuple[int, int], current_time: float, can_place_bomb: bool) -> Optional[Dict[str, Any]]:
        """Th·ª±c hi·ªán plan d√†i h·∫°n"""
        plan_type = plan.get("type")
        plan_goal = plan.get("goal_cell")
        
        if plan_type == "collect_item":
            logger.info(f"üíé PLAN D√ÄI H·∫†N - NH·∫∂T V·∫¨T PH·∫®M: ƒë·∫øn {plan_goal}")
            self.last_action_time = current_time
            self._update_last_direction(current_cell, plan_goal)
            return {"type": "move", "goal_cell": plan_goal}
        elif plan_type == "bomb_chest":
            # So s√°nh int v·ªõi float: (14, 4) == (14.0, 4.0)
            if (int(plan_goal[0]) == int(current_cell[0]) and 
                int(plan_goal[1]) == int(current_cell[1])):
                if can_place_bomb and self._should_place_bomb_for_chest(current_cell, current_time, can_place_bomb):
                    # Hi·ªÉn th·ªã plan chi ti·∫øt
                    bomb_pos = plan_goal
                    escape_pos = plan.get("escape_cell", "ch∆∞a t√≠nh")
                    escape_path = plan.get("escape_path", [])
                    
                    logger.info(f"üí£ PLAN D√ÄI H·∫†N - ƒê·∫∂T BOM T·∫†I V·ªä TR√ç HI·ªÜN T·∫†I")
                    logger.info(f"üéØ PLAN CHI TI·∫æT: ƒê·∫æN {bomb_pos} ‚Üí ƒê·∫∂T BOM ‚Üí THO√ÅT ƒê·∫æN {escape_pos}")
                    if escape_path:
                        logger.info(f"üõ°Ô∏è ƒê∆Ø·ªúNG THO√ÅT: {escape_path}")
                    
                    self.last_action_time = current_time
                    self.last_bomb_time_ms = current_time
                    self.must_escape_bomb = True  # B·∫ÆT BU·ªòC tho√°t l·∫ßn loop ti·∫øp
                    
                    # BLACKLIST V·ªä TR√ç ƒê√É ƒê·∫∂T BOM trong 8s ƒë·ªÉ tr√°nh quay l·∫°i ngay
                    self.failed_bomb_positions[current_cell] = current_time
                    logger.warning(f"‚ö° SET FLAG: must_escape_bomb = True + BLACKLIST {current_cell} trong 8s")
                    
                    # Clear plan sau khi ƒë·∫∑t bom
                    self.current_plan = None
                    return {"type": "bomb"}
                else:
                    logger.warning(f"üö´ KH√îNG TH·ªÇ ƒê·∫∂T BOM t·∫°i {current_cell}: blacklist 5s")
                    # BLACKLIST v·ªã tr√≠ n√†y ƒë·ªÉ tr√°nh l·∫∑p l·∫°i
                    self.failed_bomb_positions[current_cell] = current_time
                    self.current_plan = None
                    # T√¨m m·ª•c ti√™u kh√°c ngay
                    fallback = self._get_fallback_action(current_cell, current_time)
                    if fallback:
                        logger.info(f"üîÑ CHUY·ªÇN SANG M·ª§C TI√äU KH√ÅC")
                        return fallback
                    return None
            else:
                # Hi·ªÉn th·ªã plan chi ti·∫øt khi di chuy·ªÉn
                bomb_pos = plan_goal
                escape_pos = plan.get("escape_cell", "ch∆∞a t√≠nh")
                escape_path = plan.get("escape_path", [])
                
                logger.info(f"üí£ PLAN D√ÄI H·∫†N - ƒê·∫æN V·ªä TR√ç ƒê·∫∂T BOM: {plan_goal}")
                logger.info(f"üéØ PLAN CHI TI·∫æT: ƒê·∫æN {bomb_pos} ‚Üí ƒê·∫∂T BOM ‚Üí THO√ÅT ƒê·∫æN {escape_pos}")
                if escape_path:
                    logger.info(f"üõ°Ô∏è ƒê∆Ø·ªúNG THO√ÅT: {escape_path}")
                
                self.last_action_time = current_time
                self._update_last_direction(current_cell, plan_goal)
                return {"type": "move", "goal_cell": plan_goal}
        return None
    
    def _calculate_escape_plan(self, bomb_position: Tuple[int, int], current_cell: Tuple[int, int]) -> Dict[str, Any]:
        """T√≠nh escape plan cho bomb position"""
        try:
            from .helpers.escape_planner import EscapePlanner
            
            # T√≠nh escape path t·ª´ bomb position
            escape_result = EscapePlanner.find_escape_path_from_bomb(
                bomb_position=bomb_position,
                bot_position=current_cell,
                explosion_range=2,  # Default explosion range
                bomb_lifetime=5000.0
            )
            
            if escape_result:
                escape_path, escape_time = escape_result
                return {
                    "escape_cell": escape_path[-1] if escape_path else None,
                    "escape_path": escape_path,
                    "escape_time": escape_time
                }
            else:
                return {
                    "escape_cell": None,
                    "escape_path": [],
                    "escape_time": 0
                }
        except Exception as e:
            logger.warning(f"‚ö†Ô∏è L·ªñI T√çNH ESCAPE PLAN: {e}")
            return {
                "escape_cell": None,
                "escape_path": [],
                "escape_time": 0
            }
    
    def _get_fallback_action(self, current_cell: Tuple[int, int], current_time: float) -> Optional[Dict[str, Any]]:
        """X·ª≠ l√Ω t·∫•t c·∫£ fallback strategies"""
        # Ki·ªÉm tra v·ªã tr√≠ hi·ªán t·∫°i c√≥ h·ª£p l·ªá kh√¥ng
        if not (0 <= current_cell[0] <= 15 and 0 <= current_cell[1] <= 15):
            logger.warning(f"üö´ FALLBACK: V·ªã tr√≠ kh√¥ng h·ª£p l·ªá {current_cell}")
            return None
        
        # 1. Chi·∫øn l∆∞·ª£c d√†i h·∫°n
        strategic_goal = self._get_strategic_goal(current_cell)
        if strategic_goal and strategic_goal != current_cell and strategic_goal not in self.movement_history[-3:]:
            # Ki·ªÉm tra c√≥ th·ªÉ di chuy·ªÉn ƒë·∫øn m·ª•c ti√™u kh√¥ng
            if self._can_reach_goal(current_cell, strategic_goal):
                logger.info(f"üéØ CHI·∫æN L∆Ø·ª¢C: ƒë·∫øn {strategic_goal}")
                self.last_action_time = current_time
                self._update_last_direction(current_cell, strategic_goal)
                return {"type": "move", "goal_cell": strategic_goal}
            else:
                logger.warning(f"üö´ KH√îNG TH·ªÇ ƒê·∫æN M·ª§C TI√äU: {strategic_goal} - T√¨m m·ª•c ti√™u kh√°c")
        
        # 2. Di chuy·ªÉn an to√†n
        safe_goal = self._find_safe_goal(current_cell, current_time)
        if safe_goal and safe_goal != current_cell and safe_goal not in self.movement_history[-2:]:
            if self._can_reach_goal(current_cell, safe_goal):
                logger.info(f"üéØ AN TO√ÄN: ƒë·∫øn {safe_goal}")
                self.last_action_time = current_time
                self._update_last_direction(current_cell, safe_goal)
                return {"type": "move", "goal_cell": safe_goal}
            else:
                logger.warning(f"üö´ KH√îNG TH·ªÇ ƒê·∫æN AN TO√ÄN: {safe_goal}")
        
        # 3. Kh√°m ph√° khu v·ª±c m·ªõi
        exploration_goals = self._get_exploration_targets(current_cell)
        if exploration_goals:
            best_goal = max(exploration_goals, key=lambda g: abs(g[0] - current_cell[0]) + abs(g[1] - current_cell[1]))
            if best_goal not in self.movement_history[-2:] and self._can_reach_goal(current_cell, best_goal):
                logger.info(f"üîç KH√ÅM PH√Å: ƒë·∫øn {best_goal}")
                self.last_action_time = current_time
                self._update_last_direction(current_cell, best_goal)
                return {"type": "move", "goal_cell": best_goal}
            else:
                logger.warning(f"üö´ KH√îNG TH·ªÇ ƒê·∫æN KH√ÅM PH√Å: {best_goal}")
        
        # 4. X·ª≠ l√Ω oscillation
        if self._is_oscillating():
            logger.warning(f"üö´ PH√ÅT HI·ªÜN OSCILLATION: thay ƒë·ªïi chi·∫øn l∆∞·ª£c")
            self.movement_history = []
            for direction in ["UP", "DOWN", "LEFT", "RIGHT"]:
                dx, dy = DIRECTIONS[direction]
                next_cell = (current_cell[0] + dx, current_cell[1] + dy)
                if self._is_cell_passable(next_cell):
                    logger.info(f"üîÑ THAY ƒê·ªîI CHI·∫æN L∆Ø·ª¢C: {direction} ƒë·∫øn {next_cell}")
                    self._update_last_direction(current_cell, next_cell)
                    self.last_action_time = current_time
                    return {"type": "move", "goal_cell": next_cell}
        
        # 5. Reset plan n·∫øu kh√¥ng th·ªÉ di chuy·ªÉn
        logger.warning(f"üö´ KH√îNG TH·ªÇ DI CHUY·ªÇN: Reset plan v√† t√¨m h∆∞·ªõng m·ªõi")
        self.current_plan = None
        self.movement_history = []
        self.visited_cells = set()
        
        # 6. Fallback cu·ªëi c√πng
        for direction in ["UP", "DOWN", "LEFT", "RIGHT"]:
            dx, dy = DIRECTIONS[direction]
            next_cell = (current_cell[0] + dx, current_cell[1] + dy)
            if next_cell not in self.movement_history[-2:]:
                logger.info(f"üé≤ FALLBACK: {direction} ƒë·∫øn {next_cell}")
                self._update_last_direction(current_cell, next_cell)
                self.last_action_time = current_time
                return {"type": "move", "goal_cell": next_cell}
        
        # 7. Reset history v√† di chuy·ªÉn b·∫•t k·ª≥
        logger.warning(f"üö® RESET HISTORY: Kh√¥ng th·ªÉ tr√°nh v√≤ng l·∫∑p")
        self.movement_history = []
        for direction in ["UP", "DOWN", "LEFT", "RIGHT"]:
            dx, dy = DIRECTIONS[direction]
            next_cell = (current_cell[0] + dx, current_cell[1] + dy)
            if self._is_cell_passable(next_cell):
                logger.info(f"üé≤ RESET FALLBACK: {direction} ƒë·∫øn {next_cell}")
                self._update_last_direction(current_cell, next_cell)
                self.last_action_time = current_time
                return {"type": "move", "goal_cell": next_cell}
            
        return None
    
    def _can_reach_goal(self, current_cell: Tuple[int, int], goal_cell: Tuple[int, int]) -> bool:
        """Ki·ªÉm tra c√≥ th·ªÉ di chuy·ªÉn ƒë·∫øn m·ª•c ti√™u kh√¥ng"""
        try:
            from .game_state import bfs_shortest_path
            path = bfs_shortest_path(current_cell, goal_cell)
            return path is not None and len(path) > 1
        except Exception:
            return (abs(goal_cell[0] - current_cell[0]) + abs(goal_cell[1] - current_cell[1])) <= 3
        
    def _find_safe_areas(self, current_cell: Tuple[int, int]) -> List[Tuple[int, int]]:
        """T√¨m c√°c khu v·ª±c an to√†n"""
        safe_areas = []
        for dx in range(-3, 4):
            for dy in range(-3, 4):
                if dx == 0 and dy == 0:
                    continue
                target = (current_cell[0] + dx, current_cell[1] + dy)
                if (0 <= target[0] <= 15 and 0 <= target[1] <= 15 and 
                    self._is_cell_passable(target) and 
                    not self._is_in_danger(target, time.time() * 1000)):
                    safe_areas.append(target)
        return safe_areas
    
    def _find_important_items(self, current_cell: Tuple[int, int]) -> List[Tuple[int, int]]:
        """T√¨m c√°c v·∫≠t ph·∫©m quan tr·ªçng"""
        items = []
        try:
            item_tile_map = game_state.get("item_tile_map", {})
            for (x, y), item_type in item_tile_map.items():
                if (0 <= x <= 15 and 0 <= y <= 15 and 
                    item_type in ["SPEED", "EXPLOSION_RANGE", "BOMB_COUNT"]):
                    distance = abs(x - current_cell[0]) + abs(y - current_cell[1])
                    if distance <= 5:
                        items.append((x, y))
        except Exception:
            pass
        return items
        
    def choose_next_action(self) -> Optional[Dict[str, Any]]:
        """H√†m quy·∫øt ƒë·ªãnh ch√≠nh - ∆Øu ti√™n sinh t·ªìn v·ªõi plan d√†i h·∫°n"""
        # Ki·ªÉm tra tr·∫°ng th√°i game
        if not game_state.get("game_started", False):
            return None
            
        # Ki·ªÉm tra map c√≥ t·ªìn t·∫°i kh√¥ng (tr√°nh l·ªói sau khi h·ªìi sinh)
        if not game_state.get("map") or len(game_state.get("map", [])) == 0:
            logger.warning(f"üö´ AI T·∫†M D·ª™NG: Map ch∆∞a s·∫µn s√†ng sau khi h·ªìi sinh")
            return None
            
        me = get_my_bomber()
        if not me:
            return None
            
        if not me.get("movable", True):
            return None
            
        current_cell = get_my_cell()
        if not current_cell:
            return None
        
        # Ki·ªÉm tra v·ªã tr√≠ hi·ªán t·∫°i c√≥ h·ª£p l·ªá kh√¥ng
        if not (0 <= current_cell[0] <= 15 and 0 <= current_cell[1] <= 15):
            logger.warning(f"üö´ V·ªä TR√ç BOT KH√îNG H·ª¢P L·ªÜ: {current_cell} - B·ªè qua AI")
            return None
        
        # C·∫≠p nh·∫≠t b·ªô nh·ªõ kh√°m ph√°
        self._update_visited_cells(current_cell)
        
        # C·∫≠p nh·∫≠t theo d√µi bom c·ªßa m√¨nh
        self._update_my_bombs()
        
        # Reset plan n·∫øu v·ªã tr√≠ thay ƒë·ªïi ƒë·ªôt ng·ªôt (h·ªìi sinh)
        if hasattr(self, '_last_position'):
            if self._last_position and self._last_position != current_cell:
                distance = abs(current_cell[0] - self._last_position[0]) + abs(current_cell[1] - self._last_position[1])
                if distance > 3:  # Di chuy·ªÉn xa h∆°n 3 √¥ = c√≥ th·ªÉ h·ªìi sinh
                    logger.info(f"üîÑ V·ªä TR√ç THAY ƒê·ªîI: t·ª´ {self._last_position} ƒë·∫øn {current_cell}, reset plan")
                    self.current_plan = None
                    self.movement_history.clear()
                    self.visited_cells.clear()
        self._last_position = current_cell
        
        # L·∫•y th√¥ng tin hi·ªán t·∫°i
        current_time = time.time() * 1000  # ms
        my_uid = game_state.get("my_uid")
        can_place_bomb = get_bomber_bomb_count(my_uid) > 0
        
        # Tr√°nh spam commands
        move_time = self._get_move_time_ms(my_uid)
        if current_time - self.last_action_time < move_time:
            return None
        
        # 0. ∆ØU TI√äN TUY·ªÜT ƒê·ªêI - THO√ÅT SAU KHI ƒê·∫∂T BOM
        if self.must_escape_bomb:
            logger.warning(f"üèÉ B·∫ÆT BU·ªòC THO√ÅT: v·ª´a ƒë·∫∑t bom, ph·∫£i ch·∫°y ngay!")
            self.must_escape_bomb = False
            escape_move = self._get_escape_move(current_cell, current_time)
            if escape_move:
                self.last_action_time = current_time
                return escape_move
            # N·∫øu kh√¥ng t√¨m ƒë∆∞·ª£c ƒë∆∞·ªùng tho√°t, c·ªë g·∫Øng di chuy·ªÉn b·∫•t k·ª≥ h∆∞·ªõng n√†o
            for direction in ["UP", "DOWN", "LEFT", "RIGHT"]:
                dx, dy = DIRECTIONS[direction]
                next_cell = (current_cell[0] + dx, current_cell[1] + dy)
                if self._is_cell_passable(next_cell):
                    logger.warning(f"üèÉ THO√ÅT KH·∫®N C·∫§P: {direction}")
                    self.last_action_time = current_time
                    return {"type": "move", "goal_cell": next_cell}
            
            # N·∫øu kh√¥ng th·ªÉ tho√°t, clear plan ƒë·ªÉ t·∫°o plan m·ªõi
            logger.warning(f"üö´ KH√îNG TH·ªÇ THO√ÅT: Clear plan v√† t·∫°o plan m·ªõi")
            self.current_plan = None
        
        # 1. KI·ªÇM TRA AN TO√ÄN TUY·ªÜT ƒê·ªêI - Ch·∫°y kh·ªèi bom
        in_danger = self._is_in_danger(current_cell, current_time)
        if in_danger:
            safe_goal = self._find_safe_goal(current_cell, current_time)
            if safe_goal:
                logger.warning(f"üö® THO√ÅT HI·ªÇM: ƒë·∫øn {safe_goal}")
                self.last_action_time = current_time
                return {"type": "move", "goal_cell": safe_goal}
            logger.warning(f"üö® THO√ÅT HI·ªÇM: Kh√¥ng t√¨m th·∫•y n∆°i an to√†n!")
            return None
        
        # 1.5. L·∫¨P PLAN D√ÄI H·∫†N - M·ª•c ti√™u r√µ r√†ng
        # CH·ªà t·∫°o plan m·ªõi khi ch∆∞a c√≥ plan ho·∫∑c plan ƒë√£ ho√†n th√†nh
        if not self.current_plan:
            long_term_plan = self._create_long_term_plan(current_cell, current_time)
            if long_term_plan:
                self.current_plan = long_term_plan
                return self._execute_long_term_plan(long_term_plan, current_cell, current_time, can_place_bomb)
        else:
            # ƒêang c√≥ plan c≈© - ti·∫øp t·ª•c th·ª±c hi·ªán
            logger.debug(f"üîÑ TI·∫æP T·ª§C PLAN C≈®: {self.current_plan.get('type')} ‚Üí {self.current_plan.get('goal_cell')}")
            return self._execute_long_term_plan(self.current_plan, current_cell, current_time, can_place_bomb)
        
        # 1.6. ∆ØU TI√äN ƒê·∫∂T BOM LI√äN T·ª§C - Sau khi bom n·ªï
        if self._should_continue_bombing(current_cell, current_time, can_place_bomb):
            logger.info(f"üí£ ƒê·∫∂T BOM LI√äN T·ª§C: ti·∫øp t·ª•c sau khi bom n·ªï")
            self.last_action_time = current_time
            self.last_bomb_time_ms = current_time
            self.must_escape_bomb = True  # B·∫ÆT BU·ªòC tho√°t l·∫ßn loop ti·∫øp
            logger.warning(f"‚ö° SET FLAG: must_escape_bomb = True (bomb li√™n t·ª•c)")
            return {"type": "bomb"}
        
        # 1.6.5. ∆ØU TI√äN THO√ÅT KH·ªéI V√ôNG NGUY HI·ªÇM SAU KHI ƒê·∫∂T BOM
        if self._should_escape_after_bomb(current_cell, current_time):
            logger.info(f"üèÉ THO√ÅT KH·ªéI V√ôNG NGUY HI·ªÇM: sau khi ƒë·∫∑t bom")
            escape_move = self._get_escape_move(current_cell, current_time)
            if escape_move:
                self.last_action_time = current_time
                return escape_move
        
        # 1.7. ∆ØU TI√äN DI CHUY·ªÇN TH√îNG MINH KHI G·∫¶N BOT KH√ÅC
        if self._has_enemies_nearby(current_cell, radius=3):  # TƒÉng radius ƒë·ªÉ ph√°t hi·ªán s·ªõm h∆°n
            logger.info(f"ü§ñ G·∫¶N BOT KH√ÅC: ∆∞u ti√™n di chuy·ªÉn th√¥ng minh")
            smart_move = self._get_smart_move_near_enemy(current_cell, current_time)
            if smart_move:
                self.last_action_time = current_time
                return smart_move
        
        # 1.8. ∆ØU TI√äN TR√ÅNH BOT KH√ÅC NGAY C·∫¢ KHI KH√îNG G·∫¶N
        if self._should_avoid_enemies(current_cell):
            logger.info(f"ü§ñ TR√ÅNH BOT KH√ÅC: ∆∞u ti√™n di chuy·ªÉn xa kh·ªèi bot kh√°c")
            avoid_move = self._get_avoid_enemy_move(current_cell, current_time)
            if avoid_move:
                self.last_action_time = current_time
                return avoid_move
            
        # 4. B·ªé QUA ki·ªÉm tra ƒë·ª©ng im ƒë·ªÉ bot lu√¥n di chuy·ªÉn
        # should_idle = self._should_idle(current_cell, current_time)
        # if should_idle:
        #     idle_time = current_time - self.last_action_time
        #     if idle_time > 2000:  # 2 gi√¢y
        #         logger.info(f"üö® ƒê√É ƒê·ª®NG IM QU√Å L√ÇU: {idle_time:.0f}ms, t√¨m c√°ch tho√°t")
        #         for direction in ["UP", "DOWN", "LEFT", "RIGHT"]:
        #             dx, dy = DIRECTIONS[direction]
        #             next_cell = (current_cell[0] + dx, current_cell[1] + dy)
        #             if self._is_cell_passable(next_cell):
        #                 logger.info(f"üö® THO√ÅT K·∫∏T: di chuy·ªÉn {direction} ƒë·∫øn {next_cell}")
        #                 self._update_last_direction(current_cell, next_cell)
        #                 self.last_action_time = current_time
        #                 return {"type": "move", "goal_cell": next_cell}
        #         logger.info(f"üö® KH√îNG TH·ªÇ THO√ÅT: t·∫•t c·∫£ h∆∞·ªõng ƒë·ªÅu b·ªã ch·∫∑n")
        #     else:
        #         logger.info(f"üö´ QUY·∫æT ƒê·ªäNH ƒê·ª®NG IM: kh√¥ng c√≥ h√†nh ƒë·ªông n√†o (ƒë√£ ƒë·ª©ng im {idle_time:.0f}ms)")
        #     return None
            
        # 5. FALLBACK STRATEGIES
        fallback_action = self._get_fallback_action(current_cell, current_time)
        if fallback_action:
            # Clear plan khi d√πng fallback
            self.current_plan = None
        return fallback_action
        
    def _update_last_direction(self, from_cell: Tuple[int, int], to_cell: Tuple[int, int]) -> None:
        """C·∫≠p nh·∫≠t h∆∞·ªõng di chuy·ªÉn cu·ªëi c√πng ƒë·ªÉ tr√°nh oscillation"""
        # X·ª≠ l√Ω float: (14.0, 4.0) -> (14, 4)
        from_cell_int = (int(from_cell[0]), int(from_cell[1]))
        to_cell_int = (int(to_cell[0]), int(to_cell[1]))
        
        dx = to_cell_int[0] - from_cell_int[0]
        dy = to_cell_int[1] - from_cell_int[1]
        
        if dx > 0:
            direction = "RIGHT"
        elif dx < 0:
            direction = "LEFT"
        elif dy > 0:
            direction = "DOWN"
        elif dy < 0:
            direction = "UP"
        else:
            direction = None
            
        if direction:
            self._last_direction = direction
            # C·∫≠p nh·∫≠t movement history ƒë·ªÉ ph√°t hi·ªán oscillation
            self.movement_history.append(direction)
            # Gi·ªØ t·ªëi ƒëa 10 h∆∞·ªõng g·∫ßn nh·∫•t
            if len(self.movement_history) > 10:
                self.movement_history = self.movement_history[-10:]
        
    def _has_enemies_nearby(self, cell: Tuple[int, int], radius: int = 2) -> bool:
        """Ki·ªÉm tra c√≥ ƒë·ªëi th·ªß g·∫ßn ƒë√≥ kh√¥ng (gi·∫£m radius ƒë·ªÉ √≠t nh·∫°y c·∫£m h∆°n)"""
        my_uid = game_state.get("my_uid")
        
        for bomber in game_state.get("bombers", []):
            if bomber.get("uid") == my_uid:
                continue
                
            if not bomber.get("isAlive", True):
                continue
                
            bomber_x, bomber_y = bomber.get("x", 0), bomber.get("y", 0)
            # ƒê·ªëi th·ªß c≈©ng l√† bot 35x35: d√πng ph√¢n √¥ theo bbox ƒë·ªÉ kh·ªõp va ch·∫°m/ƒë·ªãnh v·ªã
            from .game_state import pos_to_cell_bot
            bomber_cell = pos_to_cell_bot(bomber_x, bomber_y)
            
            distance = abs(bomber_cell[0] - cell[0]) + abs(bomber_cell[1] - cell[1])
            if distance <= radius:
                logger.info(f"üîç ƒê·ªêI TH·ª¶ G·∫¶N: {bomber.get('name')} t·∫°i {bomber_cell}, distance={distance}")
                return True
                
        return False
        
    def _get_smart_move_near_enemy(self, current_cell: Tuple[int, int], current_time: float) -> Optional[Dict[str, Any]]:
        """T√¨m n∆∞·ªõc ƒëi th√¥ng minh khi g·∫ßn bot kh√°c - ∆∞u ti√™n di chuy·ªÉn t·ªëi ∆∞u"""
        # T√¨m v·ªã tr√≠ t·ªët nh·∫•t ƒë·ªÉ di chuy·ªÉn (xa bot kh√°c, g·∫ßn item/chest, an to√†n)
        best_move = None
        best_score = -1
        
        # Ki·ªÉm tra c√°c h∆∞·ªõng di chuy·ªÉn c√≥ th·ªÉ
        for direction in ["UP", "DOWN", "LEFT", "RIGHT"]:
            dx, dy = DIRECTIONS[direction]
            next_cell = (current_cell[0] + dx, current_cell[1] + dy)
            
            # Ki·ªÉm tra √¥ c√≥ th·ªÉ ƒëi ƒë∆∞·ª£c kh√¥ng
            if not self._is_cell_passable(next_cell):
                continue
                
            # T√≠nh ƒëi·ªÉm cho h∆∞·ªõng n√†y
            score = self._calculate_move_score(current_cell, next_cell, current_time)
            
            if score > best_score:
                best_score = score
                best_move = next_cell
        
        if best_move:
            logger.info(f"ü§ñ DI CHUY·ªÇN TH√îNG MINH: t·ª´ {current_cell} ƒë·∫øn {best_move} (score={best_score})")
            self._update_last_direction(current_cell, best_move)
            return {"type": "move", "goal_cell": best_move}
        
        return None
    
    def _calculate_move_score(self, current_cell: Tuple[int, int], next_cell: Tuple[int, int], current_time: float) -> float:
        """T√≠nh ƒëi·ªÉm cho n∆∞·ªõc ƒëi - cao h∆°n = t·ªët h∆°n"""
        score = 0.0
        
        # 1. Tr√°nh bot kh√°c (∆∞u ti√™n cao nh·∫•t)
        if not self._has_enemies_nearby(next_cell, radius=2):
            score += 100.0  # TƒÉng ƒëi·ªÉm ƒë·ªÉ ∆∞u ti√™n cao h∆°n
        
        # 1.5. ∆Øu ti√™n di chuy·ªÉn xa kh·ªèi bot kh√°c
        distance_from_enemies = self._get_distance_from_nearest_enemy(next_cell)
        if distance_from_enemies > 0:
            score += distance_from_enemies * 25.0  # TƒÉng ƒëi·ªÉm ƒë·ªÉ ∆∞u ti√™n xa bot kh√°c
        
        # 2. Tr√°nh nguy hi·ªÉm
        if not self._is_in_danger(next_cell, current_time):
            score += 30.0  # Quan tr·ªçng - tr√°nh bom/l·ª≠a
        
        # 3. H∆∞·ªõng v·ªÅ item/chest g·∫ßn ƒë√≥
        nearby_items = self._get_nearby_items(next_cell, radius=3)
        if nearby_items:
            score += len(nearby_items) * 10.0  # M·ªói item/chest g·∫ßn = +10 ƒëi·ªÉm
        
        # 4. H∆∞·ªõng v·ªÅ v√πng tr·ªëng (√≠t t∆∞·ªùng)
        open_space = self._count_open_spaces(next_cell, radius=2)
        score += open_space * 5.0  # M·ªói √¥ tr·ªëng g·∫ßn = +5 ƒëi·ªÉm
        
        # 4.5. ∆Øu ti√™n h∆∞·ªõng c√≥ nhi·ªÅu kh√¥ng gian m·ªü (tr√°nh b·ªã k·∫πt)
        future_open_space = self._count_open_spaces(next_cell, radius=3)
        score += future_open_space * 3.0  # M·ªói √¥ tr·ªëng trong t∆∞∆°ng lai = +3 ƒëi·ªÉm
        
        # 5. Tr√°nh di chuy·ªÉn l·∫∑p l·∫°i (gi·∫£m ƒëi·ªÉm n·∫øu ƒë√£ ƒëi qua)
        if next_cell in self.visited_cells:
            score -= 20.0  # Tr·ª´ ƒëi·ªÉm n·∫øu ƒë√£ ƒëi qua
        
        # 7. Tr√°nh v√≤ng l·∫∑p l√™n xu·ªëng (gi·∫£m ƒëi·ªÉm n·∫øu di chuy·ªÉn theo h∆∞·ªõng ng∆∞·ª£c l·∫°i)
        if hasattr(self, '_last_direction') and self._last_direction:
            last_dx, last_dy = DIRECTIONS.get(self._last_direction, (0, 0))
            current_dx, current_dy = next_cell[0] - current_cell[0], next_cell[1] - current_cell[1]
            
            # N·∫øu di chuy·ªÉn ng∆∞·ª£c l·∫°i h∆∞·ªõng v·ª´a ƒëi
            if (current_dx == -last_dx and current_dy == -last_dy) and (current_dx != 0 or current_dy != 0):
                score -= 30.0  # Tr·ª´ ƒëi·ªÉm m·∫°nh n·∫øu di chuy·ªÉn ng∆∞·ª£c l·∫°i
                logger.debug(f"üîÑ TR√ÅNH V√íNG L·∫∂P: di chuy·ªÉn ng∆∞·ª£c l·∫°i h∆∞·ªõng {self._last_direction}")
        
        # 6. ∆Øu ti√™n di chuy·ªÉn xa kh·ªèi v·ªã tr√≠ hi·ªán t·∫°i
        distance_from_current = abs(next_cell[0] - current_cell[0]) + abs(next_cell[1] - current_cell[1])
        if distance_from_current > 0:
            score += 5.0  # Th√™m ƒëi·ªÉm n·∫øu di chuy·ªÉn th·ª±c s·ª±
        
        return score
    
    def _get_nearby_items(self, cell: Tuple[int, int], radius: int = 3) -> List[Tuple[int, int]]:
        """T√¨m item/chest g·∫ßn v·ªã tr√≠"""
        items = []
        try:
            # T√¨m items
            item_tile_map = game_state.get("item_tile_map", {})
            for (x, y), item_type in item_tile_map.items():
                distance = abs(x - cell[0]) + abs(y - cell[1])
                if distance <= radius:
                    items.append((x, y))
            
            # T√¨m chests
            chest_tile_map = game_state.get("chest_tile_map", {})
            for (x, y) in chest_tile_map.keys():
                distance = abs(x - cell[0]) + abs(y - cell[1])
                if distance <= radius:
                    items.append((x, y))
        except Exception:
            pass
        
        return items
    
    def _count_open_spaces(self, cell: Tuple[int, int], radius: int = 2) -> int:
        """ƒê·∫øm s·ªë √¥ tr·ªëng xung quanh"""
        count = 0
        for dx in range(-radius, radius + 1):
            for dy in range(-radius, radius + 1):
                if dx == 0 and dy == 0:
                    continue
                check_cell = (cell[0] + dx, cell[1] + dy)
                if self._is_cell_passable(check_cell):
                    count += 1
        return count
    
    def _get_distance_from_nearest_enemy(self, cell: Tuple[int, int]) -> int:
        """T√≠nh kho·∫£ng c√°ch ƒë·∫øn bot kh√°c g·∫ßn nh·∫•t"""
        my_uid = game_state.get("my_uid")
        min_distance = 999
        
        for bomber in game_state.get("bombers", []):
            if bomber.get("uid") == my_uid:
                continue
            if not bomber.get("isAlive", True):
                continue
                
            bomber_x, bomber_y = bomber.get("x", 0), bomber.get("y", 0)
            bomber_cell = pos_to_cell_bot(bomber_x, bomber_y)
            distance = abs(bomber_cell[0] - cell[0]) + abs(bomber_cell[1] - cell[1])
            min_distance = min(min_distance, distance)
        
        return min_distance if min_distance < 999 else 0
    
    def _should_avoid_enemies(self, cell: Tuple[int, int]) -> bool:
        """Ki·ªÉm tra c√≥ n√™n tr√°nh bot kh√°c kh√¥ng (k·ªÉ c·∫£ khi kh√¥ng g·∫ßn)"""
        my_uid = game_state.get("my_uid")
        bombers = game_state.get("bombers", [])
        
        for bomber in bombers:
            if bomber.get("uid") == my_uid:
                continue
            if not bomber.get("isAlive", True):
                continue
                
            bomber_x, bomber_y = bomber.get("x", 0), bomber.get("y", 0)
            bomber_cell = pos_to_cell_bot(bomber_x, bomber_y)
            distance = abs(bomber_cell[0] - cell[0]) + abs(bomber_cell[1] - cell[1])
            
            # N·∫øu bot kh√°c c√≥ explosion range cao v√† g·∫ßn ƒë√≥
            explosion_range = bomber.get("explosionRange", 2)
            if explosion_range >= 5 and distance <= 6:  # Bot m·∫°nh v√† g·∫ßn
                logger.info(f"ü§ñ TR√ÅNH BOT M·∫†NH: {bomber.get('name')} range={explosion_range} distance={distance}")
                return True
                
            # N·∫øu bot kh√°c c√≥ nhi·ªÅu bom v√† g·∫ßn ƒë√≥
            bomb_count = bomber.get("bombCount", 1)
            if bomb_count >= 3 and distance <= 5:  # Bot c√≥ nhi·ªÅu bom v√† g·∫ßn
                logger.info(f"ü§ñ TR√ÅNH BOT NHI·ªÄU BOM: {bomber.get('name')} bombs={bomb_count} distance={distance}")
                return True
        
        return False
    
    def _get_avoid_enemy_move(self, current_cell: Tuple[int, int], current_time: float) -> Optional[Dict[str, Any]]:
        """T√¨m n∆∞·ªõc ƒëi ƒë·ªÉ tr√°nh bot kh√°c"""
        best_move = None
        best_score = -1
        
        # T√¨m h∆∞·ªõng di chuy·ªÉn xa kh·ªèi bot kh√°c nh·∫•t
        for direction in ["UP", "DOWN", "LEFT", "RIGHT"]:
            dx, dy = DIRECTIONS[direction]
            next_cell = (current_cell[0] + dx, current_cell[1] + dy)
            
            if not self._is_cell_passable(next_cell):
                continue
                
            # T√≠nh ƒëi·ªÉm d·ª±a tr√™n kho·∫£ng c√°ch ƒë·∫øn bot kh√°c
            distance_from_enemies = self._get_distance_from_nearest_enemy(next_cell)
            score = distance_from_enemies * 50.0  # ∆Øu ti√™n cao ƒë·ªÉ xa bot kh√°c
            
            # Tr√°nh nguy hi·ªÉm
            if not self._is_in_danger(next_cell, current_time):
                score += 30.0
            
            if score > best_score:
                best_score = score
                best_move = next_cell
        
        if best_move:
            logger.info(f"ü§ñ TR√ÅNH BOT KH√ÅC: t·ª´ {current_cell} ƒë·∫øn {best_move} (score={best_score})")
            self._update_last_direction(current_cell, best_move)
            return {"type": "move", "goal_cell": best_move}
        
        return None
    
    def _should_escape_after_bomb(self, cell: Tuple[int, int], current_time: float) -> bool:
        """
        Ki·ªÉm tra c√≥ c·∫ßn tho√°t kh·ªèi v√πng nguy hi·ªÉm sau khi ƒë·∫∑t bom kh√¥ng
        C√ÅCH M·ªöI: Ki·ªÉm tra ngay sau khi ƒë·∫∑t bom, kh√¥ng ƒë·ª£i ƒë·∫øn khi nguy hi·ªÉm
        """
        # QUAN TR·ªåNG: Ki·ªÉm tra NGAY L·∫¨P T·ª®C sau khi ƒë·∫∑t bom (trong v√≤ng 500ms)
        time_since_bomb = current_time - self.last_bomb_time_ms
        if time_since_bomb <= 500:  # 500ms = ngay sau khi ƒë·∫∑t bom
            logger.info(f"üèÉ C·∫¶N THO√ÅT NGAY: v·ª´a ƒë·∫∑t bom {time_since_bomb:.0f}ms tr∆∞·ªõc")
            return True
        
        # Ki·ªÉm tra n·∫øu v·ª´a ƒë·∫∑t bom g·∫ßn ƒë√¢y (trong v√≤ng 4 gi√¢y)
        if time_since_bomb > 4000:  # 4 gi√¢y
            return False
            
        # Ki·ªÉm tra n·∫øu ƒëang ·ªü v√πng nguy hi·ªÉm
        if self._is_in_danger(cell, current_time):
            logger.info(f"üèÉ C·∫¶N THO√ÅT: ƒëang ·ªü v√πng nguy hi·ªÉm sau khi ƒë·∫∑t bom")
            return True
            
        # Ki·ªÉm tra n·∫øu c√≥ bom g·∫ßn ƒë√≥ s·∫Øp n·ªï
        try:
            from .game_state import game_state
            bombs = game_state.get("bombs", [])
            for bomb in bombs:
                bomb_x, bomb_y = bomb.get("x", 0), bomb.get("y", 0)
                bomb_cell = pos_to_cell_bot(bomb_x, bomb_y)
                distance = abs(bomb_cell[0] - cell[0]) + abs(bomb_cell[1] - cell[1])
                
                # N·∫øu bom g·∫ßn v√† s·∫Øp n·ªï (trong v√≤ng 3.5 gi√¢y)
                if distance <= 4:
                    life_time = bomb.get("lifeTime", 5000)
                    if life_time <= 3500:  # C√≤n √≠t h∆°n 3.5 gi√¢y
                        logger.info(f"üèÉ C·∫¶N THO√ÅT: bom s·∫Øp n·ªï t·∫°i {bomb_cell}, c√≤n {life_time}ms")
                        return True
        except Exception:
            pass
            
        return False
    
    def _get_escape_move(self, current_cell: Tuple[int, int], current_time: float) -> Optional[Dict[str, Any]]:
        """T√¨m n∆∞·ªõc ƒëi ƒë·ªÉ tho√°t kh·ªèi v√πng nguy hi·ªÉm"""
        try:
            from .helpers.escape_planner import EscapePlanner
            
            my_uid = game_state.get("my_uid")
            explosion_range = get_bomber_explosion_range(my_uid)
            bombs = game_state.get("bombs", [])
            
            # T√¨m bom g·∫ßn nh·∫•t
            if bombs:
                nearest_bomb = min(bombs, key=lambda b: abs(pos_to_cell_bot(b.get("x", 0), b.get("y", 0))[0] - current_cell[0]) + 
                                                         abs(pos_to_cell_bot(b.get("x", 0), b.get("y", 0))[1] - current_cell[1]))
                bomb_cell = pos_to_cell_bot(nearest_bomb.get("x", 0), nearest_bomb.get("y", 0))
                life_time = nearest_bomb.get("lifeTime", 5000)
                
                result = EscapePlanner.find_escape_path_from_bomb(bomb_cell, current_cell, explosion_range, life_time)
                if result and len(result[0]) >= 2:
                    next_cell = result[0][1]
                    logger.info(f"‚úÖ ESCAPE: {current_cell} ‚Üí {next_cell}, t={result[1]:.0f}ms < {life_time:.0f}ms")
                    self._update_last_direction(current_cell, next_cell)
                    return {"type": "move", "goal_cell": next_cell}
        except Exception as e:
            logger.error(f"‚ùå L·ªói escape: {e}")
        
        # Fallback: t√¨m √¥ an to√†n g·∫ßn nh·∫•t
        best_move = None
        best_score = -1
        for direction in ["UP", "DOWN", "LEFT", "RIGHT"]:
            dx, dy = DIRECTIONS[direction]
            next_cell = (current_cell[0] + dx, current_cell[1] + dy)
            if not self._is_cell_passable(next_cell):
                continue
            score = 100.0 if not self._is_in_danger(next_cell, current_time) else 0.0
            if score > best_score:
                best_score = score
                best_move = next_cell
        
        if best_move:
            logger.info(f"üèÉ ESCAPE FALLBACK: {current_cell} ‚Üí {best_move}")
            self._update_last_direction(current_cell, best_move)
            return {"type": "move", "goal_cell": best_move}
        return None
        
    def _is_in_danger(self, cell: Tuple[int, int], current_time: float) -> bool:
        """Ki·ªÉm tra nguy hi·ªÉm d·ª±a tr√™n FastGameState.hazard_until (TTL theo tick)."""
        fs = get_fast_state()
        if not fs.static:
            return False
        # Quy ƒë·ªïi ms -> tick (x·∫•p x·ªâ gi√¢y)
        now_tick = fs.tick
        # Th√™m d·ª± b√°o 1 b∆∞·ªõc nh·ªè n·∫øu ƒëang x√©t t∆∞∆°ng lai g·∫ßn
        # delta_ms kh√¥ng d√πng ·ªü ƒë√¢y ƒë·ªÉ tr√°nh l·ªách l·ªõn
        cx, cy = cell
        # Convert float to int for numpy array indexing
        cx, cy = int(cx), int(cy)
        if not fs.static.in_bounds(cx, cy):
            return True
        return fs.dynamic.hazard_until[cy, cx] > now_tick
            
    def _find_escape_move(self, cell: Tuple[int, int], current_time: float) -> Optional[str]:
        """T√¨m h∆∞·ªõng tho√°t hi·ªÉm"""
        # T√¨m h∆∞·ªõng an to√†n
        for direction, (dx, dy) in DIRECTIONS.items():
            next_cell = (cell[0] + dx, cell[1] + dy)
            
            # Ki·ªÉm tra c√≥ th·ªÉ ƒëi qua kh√¥ng
            if not self._is_cell_passable(next_cell):
                continue
                
            # Ki·ªÉm tra c√≥ an to√†n kh√¥ng
            if not self._is_in_danger(next_cell, current_time + 1000):  # 1s ahead
                return direction
                
            return None
        
    def _is_cell_passable(self, cell: Tuple[int, int]) -> bool:
        """Ki·ªÉm tra √¥ c√≥ th·ªÉ ƒëi qua theo FastGameState (bitmask)."""
        fs = get_fast_state()
        if not fs.static:
            return False
        cx, cy = cell
        # Convert float to int for numpy array indexing
        cx, cy = int(cx), int(cy)
        if not fs.static.in_bounds(cx, cy):
            return False
        walkable = fs.walkable_mask(avoid_hazard=False)
        return bool(walkable[cy, cx])
        
        
    def _find_nearby_items(self, cell: Tuple[int, int], radius: int = 3) -> List[Tuple[int, int]]:
        """T√¨m v·∫≠t ph·∫©m g·∫ßn ƒë√≥ t·ª´ FastGameState.dynamic.items."""
        fs = get_fast_state()
        if not fs.dynamic.items:
            return []
        nearby_items = []
        cx, cy = cell
        for (ix, iy) in fs.dynamic.items.keys():
            if abs(ix - cx) + abs(iy - cy) <= radius:
                nearby_items.append((ix, iy))
        return nearby_items
        
    def _find_item_goal(self, cell: Tuple[int, int], current_time: float) -> Optional[Tuple[int, int]]:
        """T√¨m m·ª•c ti√™u v·∫≠t ph·∫©m g·∫ßn nh·∫•t"""
        nearby_items = self._find_nearby_items(cell, radius=5)
        if not nearby_items:
            return None
            
        # T√¨m v·∫≠t ph·∫©m g·∫ßn nh·∫•t v√† an to√†n
        best_item = None
        best_distance = float('inf')
        
        for item_cell in nearby_items:
            distance = abs(item_cell[0] - cell[0]) + abs(item_cell[1] - cell[1])
            if distance < best_distance:
                # Ki·ªÉm tra an to√†n
                if not self._is_in_danger(item_cell, current_time + 2000):  # 2s ahead
                    best_distance = distance
                    best_item = item_cell
                
        return best_item
        
    def _find_safe_goal(self, cell: Tuple[int, int], current_time: float) -> Optional[Tuple[int, int]]:
        """T√¨m m·ª•c ti√™u an to√†n th√¥ng minh"""
        logger.info(f"üîç T√åM M·ª§C TI√äU AN TO√ÄN: t·ª´ {cell}")
        
        # T√¨m √¥ an to√†n trong v√≤ng 6 b∆∞·ªõc
        for radius in range(2, 7):
            candidates = []
            for dx in range(-radius, radius + 1):
                for dy in range(-radius, radius + 1):
                    if dx == 0 and dy == 0:
                        continue
                    target = (cell[0] + dx, cell[1] + dy)
                    if (0 <= target[0] <= 15 and 0 <= target[1] <= 15 and
                        target != cell and 
                        self._is_cell_passable(target) and 
                        not self._is_in_danger(target, current_time + 2000)):
                        distance = abs(dx) + abs(dy)
                        priority = distance
                        
                        # ∆Øu ti√™n √¥ ch∆∞a thƒÉm
                        if target not in self.visited_cells:
                            priority += 5
                            
                        candidates.append((priority, target))
            
            if candidates:
                candidates.sort(key=lambda x: x[0], reverse=True)
                best_target = candidates[0][1]
                logger.info(f"üéØ T√åM TH·∫§Y {len(candidates)} √¥ an to√†n trong b√°n k√≠nh {radius}: {best_target}")
                return best_target
        
        logger.warning(f"üö´ KH√îNG T√åM TH·∫§Y √¥ an to√†n t·ª´ {cell}")
        return None
        
        
        
    def _should_place_bomb_for_chest(self, cell: Tuple[int, int], current_time: float, can_place: bool) -> bool:
        """
        Quy·∫øt ƒë·ªãnh c√≥ n√™n ƒë·∫∑t bom ƒë·ªÉ n·ªï r∆∞∆°ng kh√¥ng
        C√ÅCH M·ªöI: S·ª≠ d·ª•ng AdvancedBombingStrategy v·ªõi timing calculation
        """
        if not can_place:
            return False
        
        # Ki·ªÉm tra cooldown
        cooldown = 500 if current_time - self.bomb_exploded_time < 3000 else 2000
        if current_time - self.last_bomb_time_ms < cooldown:
            return False
        
        # Ki·ªÉm tra nguy hi·ªÉm hi·ªán t·∫°i
        if self._is_in_danger(cell, current_time) or self._has_dangerous_bombs_nearby(cell, current_time):
            return False
        
        # S·ª¨ D·ª§NG ADVANCED BOMBING STRATEGY
        try:
            from .helpers.advanced_bombing import AdvancedBombingStrategy
            
            # Ki·ªÉm tra c√≥ an to√†n ƒë·ªÉ ƒë·∫∑t bom kh√¥ng
            should_place = AdvancedBombingStrategy.should_place_bomb_now(
                cell, cell, can_place
            )
            
            if should_place:
                logger.info(f"‚úÖ AN TO√ÄN ƒê·∫∂T BOM: ƒê√£ ki·ªÉm tra ƒë∆∞·ªùng tho√°t v√† timing")
                return True
            else:
                logger.warning(f"‚ö†Ô∏è KH√îNG AN TO√ÄN: Kh√¥ng ƒë·ªß ƒëi·ªÅu ki·ªán ƒë·∫∑t bom t·∫°i {cell}")
                return False
                
        except Exception as e:
            logger.error(f"‚ùå L·ªói advanced bombing: {e}")
            # Fallback v·ªÅ logic c≈©
            if (self._has_chest_in_bomb_range(cell) and self._has_escape_after_bomb(cell)):
                logger.info(f"üí£ ƒê·∫∂T BOM (FALLBACK): c√≥ r∆∞∆°ng v√† c√≥ l·ªëi tho√°t")
                return True
            return False
    
    def _has_chest_in_bomb_range(self, cell: Tuple[int, int]) -> bool:
        """Ki·ªÉm tra c√≥ r∆∞∆°ng trong t·∫ßm n·ªï c·ªßa bom kh√¥ng (t√≠nh t·∫ßm n·ªï th·ª±c t·∫ø)"""
        try:
            from .game_state import game_state, has_chest_at_tile, has_wall_at_tile, in_bounds
            
            my_uid = game_state.get("my_uid")
            if not my_uid:
                return False
                
            # L·∫•y t·∫ßm n·ªï c·ªßa bom
            explosion_range = get_bomber_explosion_range(my_uid)
            
            # Ki·ªÉm tra 4 h∆∞·ªõng: UP, DOWN, LEFT, RIGHT
            for direction, (dx, dy) in DIRECTIONS.items():
                chest_found = False
                
                # Duy·ªát t·ª´ v·ªã tr√≠ bom ra ngo√†i theo h∆∞·ªõng
                for distance in range(1, explosion_range + 1):
                    check_cell = (cell[0] + dx * distance, cell[1] + dy * distance)
                    
                    # Ki·ªÉm tra trong bounds
                    if not in_bounds(check_cell[0], check_cell[1]):
                        break
                    
                    # N·∫øu g·∫∑p t∆∞·ªùng, d·ª´ng l·∫°i (kh√¥ng n·ªï qua t∆∞·ªùng)
                    if has_wall_at_tile(check_cell[0], check_cell[1]):
                        break
                    
                    # N·∫øu c√≥ r∆∞∆°ng, ƒë√°nh d·∫•u t√¨m th·∫•y
                    if has_chest_at_tile(check_cell[0], check_cell[1]):
                        chest_found = True
                        logger.info(f"üíé T√åM TH·∫§Y R∆Ø∆†NG TRONG T·∫¶M N·ªî: {check_cell} (h∆∞·ªõng {direction}, kho·∫£ng c√°ch {distance})")
                        break
                
                # N·∫øu t√¨m th·∫•y r∆∞∆°ng ·ªü b·∫•t k·ª≥ h∆∞·ªõng n√†o, return True
                if chest_found:
                    return True
            
            return False
            
        except Exception as e:
            logger.error(f"‚ùå L·ªói ki·ªÉm tra t·∫ßm n·ªï: {e}")
            return False
        
    def _has_escape_after_bomb(self, cell: Tuple[int, int]) -> bool:
        """Ki·ªÉm tra c√≥ l·ªëi tho√°t sau khi ƒë·∫∑t bom"""
        try:
            # T√≠nh v√πng n·ªï c·ªßa bom
            my_uid = game_state.get("my_uid")
            explosion_range = get_bomber_explosion_range(my_uid)
            
            blast_cells = set()
            blast_cells.add(cell)
            
            # T√≠nh v√πng n·ªï theo 4 h∆∞·ªõng
            for dx, dy in DIRECTIONS.values():
                for k in range(1, explosion_range + 1):
                    nx, ny = cell[0] + dx * k, cell[1] + dy * k
                    blast_cells.add((nx, ny))
                    
                    # D·ª´ng t·∫°i t∆∞·ªùng
                    mp = game_state.get("map", [])
                    if (0 <= nx < len(mp[0]) and 0 <= ny < len(mp) and mp[ny][nx] == "W"):
                        break
                        
            # T√¨m √¥ an to√†n g·∫ßn v·ªã tr√≠ hi·ªán t·∫°i (trong b√°n k√≠nh 3)
            safe_cells = []
            mp = game_state.get("map", [])
            for dx in range(-3, 4):
                for dy in range(-3, 4):
                    check_cell = (cell[0] + dx, cell[1] + dy)
                    if (check_cell not in blast_cells and 
                        self._is_cell_passable(check_cell) and
                        0 <= check_cell[0] < len(mp[0]) and 0 <= check_cell[1] < len(mp)):
                        safe_cells.append(check_cell)
            
            # C·∫ßn √≠t nh·∫•t 1 l·ªëi tho√°t g·∫ßn ƒë√≥
            has_escape = len(safe_cells) > 0
            if not has_escape:
                logger.info(f"üö´ KH√îNG C√ì L·ªêI THO√ÅT: v√πng n·ªï={len(blast_cells)} √¥, an to√†n={len(safe_cells)} √¥")
            else:
                logger.info(f"‚úÖ C√ì L·ªêI THO√ÅT: {len(safe_cells)} √¥ an to√†n g·∫ßn ƒë√≥")
            
            return has_escape
            
        except Exception as e:
            logger.error(f"‚ùå L·ªói ki·ªÉm tra l·ªëi tho√°t: {e}")
            return False
        
    def _get_safe_move(self, cell: Tuple[int, int], current_time: float) -> Optional[str]:
        """L·∫•y di chuy·ªÉn an to√†n"""
        # ∆Øu ti√™n ƒëi ƒë·∫øn m·ªôt √¥ an to√†n g·∫ßn nh·∫•t b·∫±ng BFS (radial search ƒë∆°n gi·∫£n)
        fs = get_fast_state()
        if not fs.static:
            return None
        # tr∆∞·ªõc h·∫øt th·ª≠ 4 h∆∞·ªõng k·ªÅ n·∫øu an to√†n
        for direction, (dx, dy) in DIRECTIONS.items():
            next_cell = (cell[0] + dx, cell[1] + dy)
            if self._is_cell_passable(next_cell) and not self._is_in_danger(next_cell, current_time + 1000):
                return direction
        # n·∫øu kh√¥ng c√≥, t√¨m m·ªôt √¥ an to√†n trong v√≤ng 4 b∆∞·ªõc v√† ƒëi b∆∞·ªõc ƒë·∫ßu ti√™n theo BFS
        for radius in (2, 3, 4):
            candidates: list[Tuple[int, int]] = []
            for dx in range(-radius, radius + 1):
                for dy in range(-radius, radius + 1):
                    tgt = (cell[0] + dx, cell[1] + dy)
                    if not self._is_cell_passable(tgt):
                        continue
                    if not self._is_in_danger(tgt, current_time + 1000):
                        candidates.append(tgt)
            candidates.sort(key=lambda p: abs(p[0] - cell[0]) + abs(p[1] - cell[1]))
            for tgt in candidates[:6]:
                path = astar_shortest_path(cell, tgt, avoid_hazard=True, avoid_bots=False)
                if not path:
                    path = bfs_shortest_path(cell, tgt, avoid_hazard=True, avoid_bots=False)
                if path and len(path) >= 2:
                    return self._get_direction_to_cell(cell, path[1])
        return None
    
    def _find_bomb_position_near_chest(self, current_cell: Tuple[int, int], current_time: float) -> Optional[Tuple[int, int]]:
        """T√¨m v·ªã tr√≠ ƒë·∫∑t bom g·∫ßn r∆∞∆°ng"""
        try:
            from .helpers.advanced_bombing import AdvancedBombingStrategy
            from .game_state import astar_shortest_path
            
            best_position = AdvancedBombingStrategy.find_best_bombing_position(
                current_cell, max_search_radius=16,
                blacklist=self.failed_bomb_positions, current_time=current_time
            )
            
            if best_position and not self._is_position_blacklisted(best_position, current_time):
                if best_position != current_cell:
                    path = astar_shortest_path(current_cell, best_position, avoid_hazard=True, avoid_bots=False)
                    if not path or len(path) < 2:
                        return None
                logger.info(f"üéØ T√¨m th·∫•y v·ªã tr√≠ ƒë·∫∑t bom: {best_position}")
                return best_position
        except Exception as e:
            logger.error(f"‚ùå L·ªói bombing: {e}")
        return None
    
    def _is_position_blacklisted(self, position: Tuple[int, int], current_time: float) -> bool:
        """Ki·ªÉm tra v·ªã tr√≠ c√≥ trong blacklist kh√¥ng"""
        if position in self.failed_bomb_positions:
            failed_time = self.failed_bomb_positions[position]
            if current_time - failed_time < self.blacklist_duration:
                return True
            else:
                # X√≥a kh·ªèi blacklist n·∫øu ƒë√£ h·∫øt h·∫°n
                del self.failed_bomb_positions[position]
        return False
    
    def _add_to_blacklist(self, position: Tuple[int, int], current_time: float):
        """Th√™m v·ªã tr√≠ v√†o blacklist"""
        self.failed_bomb_positions[position] = current_time
        logger.info(f"üö´ BLACKLIST: Th√™m {position} v√†o danh s√°ch c·∫•m ({len(self.failed_bomb_positions)} v·ªã tr√≠)")

    def _get_bomb_positions_for_chest_with_range(self, chest: Tuple[int, int]) -> List[Tuple[int, int]]:
        """T√¨m v·ªã tr√≠ ƒë·∫∑t bom ƒë·ªÉ n·ªï r∆∞∆°ng - S·ª¨ D·ª§NG T·∫¶M N·ªî TH·ª∞C T·∫æ"""
        try:
            from .game_state import game_state, has_wall_at_tile, in_bounds
            
            my_uid = game_state.get("my_uid")
            if not my_uid:
                return []
                
            # L·∫•y t·∫ßm n·ªï c·ªßa bom
            explosion_range = get_bomber_explosion_range(my_uid)
            bomb_positions = []
            
            # T√¨m v·ªã tr√≠ ƒë·∫∑t bom trong t·∫ßm n·ªï c·ªßa r∆∞∆°ng
            # Duy·ªát t·ª´ r∆∞∆°ng ra ngo√†i theo 4 h∆∞·ªõng
            for direction, (dx, dy) in DIRECTIONS.items():
                for distance in range(1, explosion_range + 1):
                    # V·ªã tr√≠ ƒë·∫∑t bom = r∆∞∆°ng - h∆∞·ªõng * kho·∫£ng c√°ch
                    bomb_pos = (chest[0] - dx * distance, chest[1] - dy * distance)
                    
                    # Ki·ªÉm tra trong bounds
                    if not in_bounds(bomb_pos[0], bomb_pos[1]):
                        break
                    
                    # N·∫øu g·∫∑p t∆∞·ªùng, d·ª´ng l·∫°i (kh√¥ng th·ªÉ ƒë·∫∑t bom qua t∆∞·ªùng)
                    if has_wall_at_tile(bomb_pos[0], bomb_pos[1]):
                        break
                    
                    # Ki·ªÉm tra c√≥ th·ªÉ ƒë·∫∑t bom t·∫°i v·ªã tr√≠ n√†y
                    if self._is_cell_passable(bomb_pos):
                        bomb_positions.append(bomb_pos)
            
            return bomb_positions
            
        except Exception as e:
            logger.error(f"‚ùå L·ªói t√¨m v·ªã tr√≠ ƒë·∫∑t bom: {e}")
            return []
    
    def _find_chests_in_range(self, current_cell: Tuple[int, int], max_range: int) -> List[Tuple[int, int]]:
        """T√¨m r∆∞∆°ng trong t·∫ßm cho tr∆∞·ªõc"""
        chests = []
        try:
            from .game_state import game_state
            chest_data = game_state.get("chests", [])
            for chest in chest_data:
                chest_cell = pos_to_cell(chest.get("x", 0), chest.get("y", 0))
                distance = abs(chest_cell[0] - current_cell[0]) + abs(chest_cell[1] - current_cell[1])
                if distance <= max_range:
                    chests.append(chest_cell)
        except Exception:
            pass
        return chests
    
    def _get_bomb_positions_for_chest(self, chest_cell: Tuple[int, int]) -> List[Tuple[int, int]]:
        """T√¨m c√°c v·ªã tr√≠ c√≥ th·ªÉ ƒë·∫∑t bom ƒë·ªÉ n·ªï r∆∞∆°ng"""
        bomb_positions = []
        
        # T√¨m v·ªã tr√≠ ƒë·∫∑t bom trong t·∫ßm n·ªï (4 √¥)
        for dx in range(-4, 5):
            for dy in range(-4, 5):
                if dx == 0 and dy == 0:
                    continue
                bomb_pos = (chest_cell[0] + dx, chest_cell[1] + dy)
                
                # TR√ÅNH H√ÄNG/C·ªòT BI√äN: 0, 16
                if (bomb_pos[0] <= 0 or bomb_pos[0] >= 16 or 
                    bomb_pos[1] <= 0 or bomb_pos[1] >= 16):
                    continue
                
                # Ki·ªÉm tra bom c√≥ th·ªÉ n·ªï ƒë·∫øn r∆∞∆°ng kh√¥ng
                if self._can_bomb_reach_chest(bomb_pos, chest_cell):
                    bomb_positions.append(bomb_pos)
                    
        return bomb_positions
    
    def _can_bomb_reach_chest(self, bomb_pos: Tuple[int, int], chest_pos: Tuple[int, int]) -> bool:
        """Ki·ªÉm tra bom c√≥ th·ªÉ n·ªï ƒë·∫øn r∆∞∆°ng kh√¥ng"""
        # Ki·ªÉm tra c√πng h√†ng ho·∫∑c c√πng c·ªôt
        if bomb_pos[0] == chest_pos[0] or bomb_pos[1] == chest_pos[1]:
            # Ki·ªÉm tra kho·∫£ng c√°ch trong t·∫ßm n·ªï (4 √¥)
            distance = abs(bomb_pos[0] - chest_pos[0]) + abs(bomb_pos[1] - chest_pos[1])
            return distance <= 4
        return False
    
# S·ª≠ d·ª•ng pos_to_cell t·ª´ game_state thay v√¨ ƒë·ªãnh nghƒ©a l·∫°i
    
    def _update_my_bombs(self) -> None:
        """C·∫≠p nh·∫≠t theo d√µi bom c·ªßa m√¨nh"""
        try:
            from .game_state import game_state
            my_uid = game_state.get("my_uid")
            if not my_uid:
                return
                
            current_bombs = set()
            bombs = game_state.get("bombs", [])
            
            for bomb in bombs:
                if bomb.get("uid") == my_uid:
                    bomb_cell = pos_to_cell(bomb.get("x", 0), bomb.get("y", 0))
                    current_bombs.add(bomb_cell)
            
            # Ki·ªÉm tra bom n√†o ƒë√£ n·ªï (kh√¥ng c√≤n trong danh s√°ch)
            exploded_bombs = self.my_bombs - current_bombs
            if exploded_bombs:
                self.bomb_exploded_time = time.time() * 1000
                logger.info(f"üí• BOM N·ªî: {exploded_bombs} - S·∫µn s√†ng ƒë·∫∑t bom ti·∫øp")
            
            self.my_bombs = current_bombs
            
        except Exception as e:
            logger.error(f"L·ªói c·∫≠p nh·∫≠t bom: {e}")
    
    def _should_continue_bombing(self, current_cell: Tuple[int, int], current_time: float, can_place: bool) -> bool:
        """Ki·ªÉm tra c√≥ n√™n ti·∫øp t·ª•c ƒë·∫∑t bom sau khi bom n·ªï"""
        if not can_place:
            return False
            
        # Ch·ªâ ƒë·∫∑t bom li√™n t·ª•c trong v√≤ng 3 gi√¢y sau khi bom n·ªï
        time_since_explosion = current_time - self.bomb_exploded_time
        if time_since_explosion > 3000:  # 3 gi√¢y
            return False
            
        # Kh√¥ng ƒë·∫∑t bom n·∫øu ƒëang trong nguy hi·ªÉm
        if self._is_in_danger(current_cell, current_time):
            return False
            
        # Ki·ªÉm tra c√≥ bom nguy hi·ªÉm g·∫ßn ƒë√≥ kh√¥ng
        if self._has_dangerous_bombs_nearby(current_cell, current_time):
            return False
            
        # Ki·ªÉm tra c√≥ r∆∞∆°ng k·ªÅ c·∫°nh kh√¥ng
        adjacent_chest = False
        for dx, dy in DIRECTIONS.values():
            nx, ny = current_cell[0] + dx, current_cell[1] + dy
            if has_chest_at_tile(nx, ny):
                adjacent_chest = True
                break
                
        if not adjacent_chest:
            return False
            
        # Ki·ªÉm tra c√≥ l·ªëi tho√°t sau khi ƒë·∫∑t bom
        if not self._has_escape_after_bomb(current_cell):
            return False
            
        logger.info(f"üí£ ƒê·∫∂T BOM LI√äN T·ª§C: c√≥ r∆∞∆°ng k·ªÅ c·∫°nh v√† an to√†n")
        return True
    
    def _find_best_item_to_collect(self, items: List[Tuple[int, int]], current_cell: Tuple[int, int], current_time: float) -> Optional[Tuple[int, int]]:
        """T√¨m v·∫≠t ph·∫©m t·ªët nh·∫•t ƒë·ªÉ nh·∫∑t d·ª±a tr√™n ∆∞u ti√™n v√† kho·∫£ng c√°ch"""
        if not items:
            return None
            
        best_item = None
        best_score = -1
        
        for item_cell in items:
            # Ki·ªÉm tra an to√†n
            if self._is_in_danger(item_cell, current_time + 2000):
                continue
                
            # T√≠nh kho·∫£ng c√°ch
            distance = abs(item_cell[0] - current_cell[0]) + abs(item_cell[1] - current_cell[1])
            
            # L·∫•y lo·∫°i v·∫≠t ph·∫©m
            try:
                from .game_state import get_tile_item
                item_type = get_tile_item(item_cell[0], item_cell[1])
            except Exception:
                continue
                
            # T√≠nh ƒëi·ªÉm ∆∞u ti√™n
            priority = self._get_item_priority(item_type)
            score = priority - distance  # ∆Øu ti√™n cao, kho·∫£ng c√°ch ng·∫Øn
            
            if score > best_score:
                best_score = score
                best_item = item_cell
                
        if best_item:
            try:
                from .game_state import get_tile_item
                item_type = get_tile_item(best_item[0], best_item[1])
                logger.info(f"üíé CH·ªåN V·∫¨T PH·∫®M: {item_type} t·∫°i {best_item} (score={best_score})")
            except Exception:
                pass
                
        return best_item
    
    def _get_item_priority(self, item_type: str) -> int:
        """L·∫•y ƒëi·ªÉm ∆∞u ti√™n c·ªßa v·∫≠t ph·∫©m"""
        priorities = {
            "SPEED": 100,           # Gi√†y - ∆∞u ti√™n cao nh·∫•t (tƒÉng t·ªëc ƒë·ªô)
            "EXPLOSION_RANGE": 90,  # Li·ªát h·ªèa - ∆∞u ti√™n cao (tƒÉng t·∫ßm n·ªï)
            "BOMB_COUNT": 80,       # ƒêa bom - ∆∞u ti√™n trung b√¨nh (tƒÉng s·ªë bom)
        }
        return priorities.get(item_type, 0)
    
    def _create_long_term_plan(self, current_cell: Tuple[int, int], current_time: float) -> Optional[Dict]:
        """T·∫°o plan d√†i h·∫°n v·ªõi m·ª•c ti√™u r√µ r√†ng"""
        try:
            # 1. ∆ØU TI√äN NH·∫∂T V·∫¨T PH·∫®M QUAN TR·ªåNG
            important_items = self._find_important_items(current_cell)
            if important_items:
                best_item = self._find_best_item_to_collect(important_items, current_cell, current_time)
                if best_item and best_item != current_cell:
                    return {
                        "type": "collect_item",
                        "goal_cell": best_item,
                        "action": "move",
                        "reason": "Nh·∫∑t v·∫≠t ph·∫©m quan tr·ªçng"
                    }
            
            # 2. T√åM V·ªä TR√ç ƒê·∫∂T BOM G·∫¶N R∆Ø∆†NG
            bomb_position = self._find_bomb_position_near_chest(current_cell, current_time)
            if bomb_position:
                # T√≠nh escape path cho plan bomb_chest
                escape_info = self._calculate_escape_plan(bomb_position, current_cell)
                
                return {
                    "type": "bomb_chest", 
                    "goal_cell": bomb_position,
                    "action": "bomb" if bomb_position == current_cell else "move",
                    "reason": "ƒê·∫∑t bom n·ªï r∆∞∆°ng",
                    "escape_cell": escape_info.get("escape_cell"),
                    "escape_path": escape_info.get("escape_path", []),
                    "escape_time": escape_info.get("escape_time", 0)
                }
            
            # 3. CHI·∫æN L∆Ø·ª¢C D√ÄI H·∫†N
            strategic_goal = self._get_strategic_goal(current_cell)
            if strategic_goal and strategic_goal != current_cell:
                return {
                    "type": "explore",
                    "goal_cell": strategic_goal, 
                    "action": "move",
                    "reason": "Kh√°m ph√° khu v·ª±c m·ªõi"
                }
                
            return None
            
        except Exception as e:
            logger.error(f"‚ùå L·ªói t·∫°o plan d√†i h·∫°n: {e}")
            return None
    
    def _has_dangerous_bombs_nearby(self, cell: Tuple[int, int], current_time: float) -> bool:
        """Ki·ªÉm tra c√≥ bom nguy hi·ªÉm g·∫ßn ƒë√≥ kh√¥ng (trong v√≤ng 3 √¥)"""
        try:
            from .game_state import game_state
            bombs = game_state.get("bombs", [])
            for bomb in bombs:
                bomb_cell = pos_to_cell(bomb.get("x", 0), bomb.get("y", 0))
                distance = abs(bomb_cell[0] - cell[0]) + abs(bomb_cell[1] - cell[1])
                
                # Ki·ªÉm tra bom trong v√≤ng 3 √¥
                if distance <= 3:
                    # Ki·ªÉm tra bom c√≥ s·∫Øp n·ªï kh√¥ng (c√≤n √≠t h∆°n 3 gi√¢y)
                    life_time = bomb.get("lifeTime", 5.0)
                    created_at = bomb.get("createdAt", current_time / 1000)
                    elapsed = (current_time / 1000) - created_at
                    remaining = life_time - elapsed
                    
                    if remaining <= 3.0:  # Bom s·∫Øp n·ªï trong 3 gi√¢y
                        logger.info(f"‚ö†Ô∏è BOM NGUY HI·ªÇM: t·∫°i {bomb_cell}, c√≤n {remaining:.1f}s")
                        return True
        except Exception as e:
            logger.error(f"L·ªói ki·ªÉm tra bom nguy hi·ªÉm: {e}")
        return False

# Instance to√†n c·ª•c
survival_ai = SimpleSurvivalAI()

def choose_next_action() -> Optional[Dict[str, Any]]:
    """ƒêi·ªÉm v√†o ch√≠nh cho quy·∫øt ƒë·ªãnh AI"""
    return survival_ai.choose_next_action()

def reset_ai_state():
    """Reset AI state to√†n c·ª•c"""
    try:
        # Reset global AI instance n·∫øu c√≥
        global survival_ai
        if survival_ai:
            survival_ai.reset_state()
        logger.info(f"‚úÖ GLOBAL AI RESET: Ho√†n th√†nh")
    except Exception as e:
        logger.error(f"‚ùå L·ªói reset global AI: {e}")