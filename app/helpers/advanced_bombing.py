"""
Advanced bombing strategy v·ªõi timing v√† safety checks
"""

import logging
from typing import Tuple, Optional, List, Dict

logger = logging.getLogger(__name__)


class AdvancedBombingStrategy:
    """
    Chi·∫øn thu·∫≠t ƒë·∫∑t bom th√¥ng minh v·ªõi:
    1. T√≠nh to√°n timing ch√≠nh x√°c
    2. Ki·ªÉm tra ƒë∆∞·ªùng tho√°t TR∆Ø·ªöC KHI ƒë·∫∑t bom
    3. ∆Øu ti√™n targets c√≥ gi√° tr·ªã cao
    4. Tr√°nh ƒë·∫∑t bom t·ª± s√°t
    """
    
    @staticmethod
    def find_best_bombing_position(
        current_position: Tuple[int, int],
        max_search_radius: int = 16,  # T√¨m to√†n b·ªô map 16x16
        blacklist: Optional[Dict[Tuple[int, int], float]] = None,
        current_time: float = 0.0
    ) -> Optional[Tuple[int, int]]:
        """
        T√¨m v·ªã tr√≠ ƒë·∫∑t bom T·ªêT NH·∫§T v·ªõi:
        - C√≥ target (chest/bot) trong t·∫ßm n·ªï
        - C√ì ƒê∆Ø·ªúNG THO√ÅT AN TO√ÄN
        - Th·ªùi gian di chuy·ªÉn + escape h·ª£p l√Ω
        - KH√îNG n·∫±m trong blacklist
        
        Returns:
            Best position ho·∫∑c None
        """
        from ..game_state import game_state, get_bomber_explosion_range, pos_to_cell
        from .escape_planner import EscapePlanner
        from .bombing import BombingHelper
        
        my_uid = game_state.get("my_uid")
        if not my_uid:
            return None
        
        explosion_range = get_bomber_explosion_range(my_uid)
        
        # T√¨m t·∫•t c·∫£ chests trong radius
        chests = BombingHelper.find_chests_in_range(current_position, max_search_radius)
        
        if not chests:
            logger.info(f"üîç KH√îNG C√ì R∆Ø∆†NG trong t·∫ßm t√¨m ki·∫øm (max_range={max_search_radius})")
            return None
        
        # ƒê√°nh gi√° t·ª´ng v·ªã tr√≠ c√≥ th·ªÉ ƒë·∫∑t bom
        candidates = []
        
        for chest in chests:
            # T√¨m v·ªã tr√≠ ƒë·∫∑t bom ƒë·ªÉ n·ªï chest n√†y
            bomb_positions = AdvancedBombingStrategy._get_bomb_positions_for_target(
                chest, explosion_range
            )
            
            for bomb_pos in bomb_positions:
                # QUAN TR·ªåNG: Check blacklist tr∆∞·ªõc
                if blacklist and bomb_pos in blacklist:
                    blacklist_time = blacklist[bomb_pos]
                    if current_time - blacklist_time < 5000:  # Blacklist 5s
                        continue
                
                # Ki·ªÉm tra v·ªã tr√≠ c√≥ th·ªÉ ƒëi qua kh√¥ng
                from .navigation import NavigationHelper
                if not NavigationHelper.is_cell_passable(bomb_pos):
                    continue
                
                # QUAN TR·ªåNG 1: Ki·ªÉm tra c√≥ ƒê∆Ø·ªúNG ƒêI ƒë·∫øn v·ªã tr√≠ n√†y kh√¥ng
                if bomb_pos != current_position:
                    from ..game_state import astar_shortest_path
                    path_to_bomb = astar_shortest_path(current_position, bomb_pos, avoid_hazard=True, avoid_bots=False)
                    if not path_to_bomb or len(path_to_bomb) < 2:
                        # V·ªã tr√≠ kh√¥ng th·ªÉ ƒë·∫øn ƒë∆∞·ª£c, b·ªè qua
                        continue
                
                # QUAN TR·ªåNG 2: Ki·ªÉm tra c√≥ ƒë∆∞·ªùng tho√°t an to√†n kh√¥ng
                if not EscapePlanner.is_safe_to_place_bomb(
                    bomb_pos, current_position, explosion_range
                ):
                    logger.warning(f"‚ö†Ô∏è B·ªé QUA {bomb_pos}: kh√¥ng c√≥ ƒë∆∞·ªùng tho√°t an to√†n")
                    continue
                
                # T√≠nh ƒëi·ªÉm cho v·ªã tr√≠ n√†y
                score = AdvancedBombingStrategy._calculate_bombing_score(
                    bomb_pos, chest, current_position, explosion_range
                )
                
                candidates.append((bomb_pos, score, chest))
        
        if not candidates:
            logger.warning("‚ö†Ô∏è KH√îNG C√ì V·ªä TR√ç ƒê·∫∂T BOM AN TO√ÄN")
            return None
        
        # Ch·ªçn v·ªã tr√≠ c√≥ ƒëi·ªÉm cao nh·∫•t
        candidates.sort(key=lambda x: x[1], reverse=True)
        best_pos, best_score, target_chest = candidates[0]
        
        logger.info(
            f"‚úÖ V·ªä TR√ç ƒê·∫∂T BOM T·ªêT NH·∫§T: {best_pos} ‚Üí {target_chest}, "
            f"score={best_score:.1f}"
        )
        
        return best_pos
    
    @staticmethod
    def _get_bomb_positions_for_target(
        target: Tuple[int, int],
        explosion_range: int
    ) -> List[Tuple[int, int]]:
        """T√¨m c√°c v·ªã tr√≠ c√≥ th·ªÉ ƒë·∫∑t bom ƒë·ªÉ n·ªï target"""
        from ..game_state import game_state
        from ..config import DIRECTIONS
        
        positions = []
        map_data = game_state.get("map", [])
        
        # Th·ª≠ t·ª´ng h∆∞·ªõng t·ª´ target
        for direction, (dx, dy) in DIRECTIONS.items():
            for distance in range(0, explosion_range + 1):
                bomb_pos = (target[0] - dx * distance, target[1] - dy * distance)
                
                # Ki·ªÉm tra bounds
                if not (0 <= bomb_pos[0] <= 15 and 0 <= bomb_pos[1] <= 15):
                    break
                
                # Ki·ªÉm tra kh√¥ng c√≥ t∆∞·ªùng gi·ªØa bomb v√† target
                path_clear = True
                for check_dist in range(1, distance + 1):
                    check_pos = (target[0] - dx * check_dist, target[1] - dy * check_dist)
                    try:
                        # Convert to int for array indexing
                        check_y, check_x = int(check_pos[1]), int(check_pos[0])
                        if (check_y < len(map_data) and 
                            check_x < len(map_data[check_y])):
                            cell_value = map_data[check_y][check_x]
                            if cell_value == 'W' or cell_value == 1:
                                path_clear = False
                                break
                    except:
                        path_clear = False
                        break
                
                if path_clear:
                    positions.append(bomb_pos)
        
        return positions
    
    @staticmethod
    def _calculate_bombing_score(
        bomb_position: Tuple[int, int],
        target: Tuple[int, int],
        bot_position: Tuple[int, int],
        explosion_range: int
    ) -> float:
        """
        T√≠nh ƒëi·ªÉm cho v·ªã tr√≠ ƒë·∫∑t bom
        Score cao = v·ªã tr√≠ t·ªët
        """
        score = 100.0
        
        # 1. Kho·∫£ng c√°ch ƒë·∫øn target (g·∫ßn target = t·ªët)
        distance_to_target = abs(bomb_position[0] - target[0]) + abs(bomb_position[1] - target[1])
        score -= distance_to_target * 5
        
        # 2. Kho·∫£ng c√°ch ƒë·∫øn bot (g·∫ßn bot = t·ªët, d·ªÖ di chuy·ªÉn t·ªõi)
        distance_to_bot = abs(bomb_position[0] - bot_position[0]) + abs(bomb_position[1] - bot_position[1])
        score -= distance_to_bot * 10
        
        # 3. Bonus n·∫øu l√† v·ªã tr√≠ hi·ªán t·∫°i (kh√¥ng c·∫ßn di chuy·ªÉn)
        if bomb_position == bot_position:
            score += 50
        
        # 4. S·ªë l∆∞·ª£ng targets trong t·∫ßm n·ªï
        num_chests_in_range = len(AdvancedBombingStrategy._count_targets_in_blast(
            bomb_position, explosion_range
        ))
        score += num_chests_in_range * 30
        
        # 5. Ki·ªÉm tra c√≥ bot kh√°c g·∫ßn ƒë√≥ (nguy hi·ªÉm)
        from ..game_state import game_state, pos_to_cell_bot
        my_uid = game_state.get("my_uid")
        for bomber in game_state.get("bombers", []):
            if bomber.get("uid") == my_uid or not bomber.get("isAlive", True):
                continue
            
            bomber_cell = pos_to_cell_bot(bomber.get("x", 0), bomber.get("y", 0))
            distance_to_enemy = abs(bomber_cell[0] - bomb_position[0]) + abs(bomber_cell[1] - bomb_position[1])
            
            if distance_to_enemy <= 3:
                score -= 30  # Gi·∫£m ƒëi·ªÉm n·∫øu c√≥ bot kh√°c g·∫ßn
        
        return score
    
    @staticmethod
    def _count_targets_in_blast(
        bomb_position: Tuple[int, int],
        explosion_range: int
    ) -> List[Tuple[int, int]]:
        """ƒê·∫øm s·ªë targets (chests) trong v√πng n·ªï"""
        from ..game_state import game_state, pos_to_cell
        from ..config import DIRECTIONS
        
        targets = []
        map_data = game_state.get("map", [])
        chests = game_state.get("chests", [])
        
        # Ki·ªÉm tra t·ª´ng h∆∞·ªõng
        for direction, (dx, dy) in DIRECTIONS.items():
            for distance in range(1, explosion_range + 1):
                check_pos = (bomb_position[0] + dx * distance, bomb_position[1] + dy * distance)
                
                # Ki·ªÉm tra bounds
                if not (0 <= check_pos[0] <= 15 and 0 <= check_pos[1] <= 15):
                    break
                
                # Ki·ªÉm tra c√≥ chest kh√¥ng
                for chest in chests:
                    chest_cell = pos_to_cell(chest.get("x", 0), chest.get("y", 0))
                    if chest_cell == check_pos:
                        targets.append(check_pos)
                
                # D·ª´ng n·∫øu g·∫∑p t∆∞·ªùng
                try:
                    # Convert to int for array indexing
                    check_y, check_x = int(check_pos[1]), int(check_pos[0])
                    if (check_y < len(map_data) and 
                        check_x < len(map_data[check_y])):
                        cell_value = map_data[check_y][check_x]
                        if cell_value == 'W' or cell_value == 1:
                            break
                except:
                    break
        
        return targets
    
    @staticmethod
    def should_place_bomb_now(
        current_position: Tuple[int, int],
        target_position: Tuple[int, int],
        can_place_bomb: bool
    ) -> bool:
        """
        Quy·∫øt ƒë·ªãnh c√≥ n√™n ƒë·∫∑t bom NGAY B√ÇY GI·ªú kh√¥ng
        
        Ch·ªâ ƒë·∫∑t bom khi:
        1. ƒê√£ ·ªü v·ªã tr√≠ m·ª•c ti√™u
        2. C√≥ target trong t·∫ßm n·ªï
        3. C√ì ƒê∆Ø·ªúNG THO√ÅT AN TO√ÄN (QUAN TR·ªåNG NH·∫§T!)
        4. Cooldown ƒë√£ h·∫øt
        """
        if not can_place_bomb:
            return False
        
        # Ki·ªÉm tra ƒë√£ ·ªü v·ªã tr√≠ m·ª•c ti√™u ch∆∞a
        if current_position != target_position:
            return False
        
        # Ki·ªÉm tra c√≥ target trong t·∫ßm n·ªï
        from ..game_state import game_state, get_bomber_explosion_range
        from .bombing import BombingHelper
        
        my_uid = game_state.get("my_uid")
        explosion_range = get_bomber_explosion_range(my_uid)
        
        if not BombingHelper.has_chest_in_bomb_range(current_position):
            logger.warning("‚ö†Ô∏è KH√îNG ƒê·∫∂T BOM: Kh√¥ng c√≥ r∆∞∆°ng trong t·∫ßm n·ªï")
            return False
        
        # QUAN TR·ªåNG: Ki·ªÉm tra ƒë∆∞·ªùng tho√°t
        from .escape_planner import EscapePlanner
        if not EscapePlanner.is_safe_to_place_bomb(
            current_position, current_position, explosion_range
        ):
            logger.warning("‚ö†Ô∏è KH√îNG ƒê·∫∂T BOM: Kh√¥ng c√≥ ƒë∆∞·ªùng tho√°t an to√†n")
            return False
        
        logger.info("‚úÖ AN TO√ÄN ƒê·∫∂T BOM: C√≥ r∆∞∆°ng v√† c√≥ ƒë∆∞·ªùng tho√°t")
        return True
